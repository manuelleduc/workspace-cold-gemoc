/**
 * generated by Xtext 2.10.0
 */
package variable.cs.tests;

import com.google.inject.Inject;
import eval.operation.EvalCVariable;
import java.util.HashMap;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import variable.cs.tests.VarLangInjectorProvider;
import variable.rev.VariableEvalRev;
import varlang.varlang.exprconcern.Variable;

@RunWith(XtextRunner.class)
@InjectWith(VarLangInjectorProvider.class)
@SuppressWarnings("all")
public class VarLangParsingTest {
  @Inject
  private ParseHelper<Variable> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a");
      _builder.newLine();
      final Variable result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final VariableEvalRev rev = new VariableEvalRev() {
      };
      final EvalCVariable op = rev.$(result);
      Pair<String, Long> _mappedTo = Pair.<String, Long>of("a", Long.valueOf(1L));
      final HashMap<String, Long> ctx = CollectionLiterals.<String, Long>newHashMap(_mappedTo);
      final Long res = op.eval(ctx);
      Assert.assertEquals(1, (res).longValue());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
