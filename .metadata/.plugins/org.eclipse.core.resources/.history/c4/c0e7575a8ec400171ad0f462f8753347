/*
 * generated by Xtext 2.10.0
 */
grammar InternalExplicitOperations;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.mleduc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.mleduc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.mleduc.services.ExplicitOperationsGrammarAccess;

}

@parser::members {

 	private ExplicitOperationsGrammarAccess grammarAccess;

    public InternalExplicitOperationsParser(TokenStream input, ExplicitOperationsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ExplicitOperationsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getLanguagesLanguageParserRuleCall_2_0_0());
					}
					lv_languages_2_0=ruleLanguage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"languages",
							lv_languages_2_0,
							"fr.mleduc.ExplicitOperations.Language");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getOperationsOperationParserRuleCall_2_1_0());
					}
					lv_operations_3_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"operations",
							lv_operations_3_0,
							"fr.mleduc.ExplicitOperations.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getArtifactsArtifactParserRuleCall_2_2_0());
					}
					lv_artifacts_4_0=ruleArtifact
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"artifacts",
							lv_artifacts_4_0,
							"fr.mleduc.ExplicitOperations.Artifact");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getCompositionsCompositionParserRuleCall_2_3_0());
					}
					lv_compositions_5_0=ruleComposition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"compositions",
							lv_compositions_5_0,
							"fr.mleduc.ExplicitOperations.Composition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operation'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getOperationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='inputs'
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getInputsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getInputsOperationParameterParserRuleCall_3_0());
				}
				lv_inputs_3_0=ruleOperationParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_3_0,
						"fr.mleduc.ExplicitOperations.OperationParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='output'
		{
			newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getOutputKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getOutputOperationParameterParserRuleCall_5_0());
				}
				lv_output_5_0=ruleOperationParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					set(
						$current,
						"output",
						lv_output_5_0,
						"fr.mleduc.ExplicitOperations.OperationParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperationParameter
entryRuleOperationParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationParameterRule()); }
	iv_ruleOperationParameter=ruleOperationParameter
	{ $current=$iv_ruleOperationParameter.current; }
	EOF;

// Rule OperationParameter
ruleOperationParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOperationParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationParameterRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getOperationParameterAccess().getTypeLanguageCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationParameterAccess().getCardinalityCardinalityParserRuleCall_3_0());
				}
				lv_cardinality_3_0=ruleCardinality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationParameterRule());
					}
					set(
						$current,
						"cardinality",
						lv_cardinality_3_0,
						"fr.mleduc.ExplicitOperations.Cardinality");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardinalityRule()); }
	iv_ruleCardinality=ruleCardinality
	{ $current=$iv_ruleCardinality.current; }
	EOF;

// Rule Cardinality
ruleCardinality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getCardinalityAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCardinalityAccess().getStartCardValParserRuleCall_1_0());
				}
				lv_start_1_0=ruleCardVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCardinalityRule());
					}
					set(
						$current,
						"start",
						lv_start_1_0,
						"fr.mleduc.ExplicitOperations.CardVal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='..'
		{
			newLeafNode(otherlv_2, grammarAccess.getCardinalityAccess().getFullStopFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCardinalityAccess().getStopCardValParserRuleCall_3_0());
				}
				lv_stop_3_0=ruleCardVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCardinalityRule());
					}
					set(
						$current,
						"stop",
						lv_stop_3_0,
						"fr.mleduc.ExplicitOperations.CardVal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getCardinalityAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCardVal
entryRuleCardVal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardValRule()); }
	iv_ruleCardVal=ruleCardVal
	{ $current=$iv_ruleCardVal.current; }
	EOF;

// Rule CardVal
ruleCardVal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCardValAccess().getCardVal0Action_0_0(),
						$current);
				}
			)
			otherlv_1='0'
			{
				newLeafNode(otherlv_1, grammarAccess.getCardValAccess().getDigitZeroKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCardValAccess().getCardVal1Action_1_0(),
						$current);
				}
			)
			otherlv_3='1'
			{
				newLeafNode(otherlv_3, grammarAccess.getCardValAccess().getDigitOneKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCardValAccess().getCardValNAction_2_0(),
						$current);
				}
			)
			otherlv_5='*'
			{
				newLeafNode(otherlv_5, grammarAccess.getCardValAccess().getAsteriskKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleLanguage
entryRuleLanguage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageRule()); }
	iv_ruleLanguage=ruleLanguage
	{ $current=$iv_ruleLanguage.current; }
	EOF;

// Rule Language
ruleLanguage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='language'
		{
			newLeafNode(otherlv_0, grammarAccess.getLanguageAccess().getLanguageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLanguageAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLanguageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLanguageAccess().getDependenciesLanguageDependencyParserRuleCall_2_0());
				}
				lv_dependencies_2_0=ruleLanguageDependency
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLanguageRule());
					}
					add(
						$current,
						"dependencies",
						lv_dependencies_2_0,
						"fr.mleduc.ExplicitOperations.LanguageDependency");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLanguageDependency
entryRuleLanguageDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageDependencyRule()); }
	iv_ruleLanguageDependency=ruleLanguageDependency
	{ $current=$iv_ruleLanguageDependency.current; }
	EOF;

// Rule LanguageDependency
ruleLanguageDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLanguageDependencyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLanguageDependencyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLanguageDependencyAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLanguageDependencyRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getLanguageDependencyAccess().getTypeLanguageCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleArtifact
entryRuleArtifact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArtifactRule()); }
	iv_ruleArtifact=ruleArtifact
	{ $current=$iv_ruleArtifact.current; }
	EOF;

// Rule Artifact
ruleArtifact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='artifact'
		{
			newLeafNode(otherlv_0, grammarAccess.getArtifactAccess().getArtifactKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArtifactAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArtifactRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getArtifactAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArtifactRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getArtifactAccess().getTypeLanguageCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleComposition
entryRuleComposition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositionRule()); }
	iv_ruleComposition=ruleComposition
	{ $current=$iv_ruleComposition.current; }
	EOF;

// Rule Composition
ruleComposition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='composition'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompositionAccess().getCompositionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='::'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompositionAccess().getColonColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getCompositionAccess().getOperationOperationCrossReference_3_0());
				}
			)
		)
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getCompositionAccess().getLeftSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getParametersCompositionParameterParserRuleCall_5_0());
				}
				lv_parameters_5_0=ruleCompositionParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_5_0,
						"fr.mleduc.ExplicitOperations.CompositionParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getCompositionAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCompositionParameter
entryRuleCompositionParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositionParameterRule()); }
	iv_ruleCompositionParameter=ruleCompositionParameter
	{ $current=$iv_ruleCompositionParameter.current; }
	EOF;

// Rule CompositionParameter
ruleCompositionParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionParameterRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCompositionParameterAccess().getNameOperationParameterCrossReference_0_0());
				}
			)
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompositionParameterAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionParameterRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getCompositionParameterAccess().getArtifactReferentiableCrossReference_2_0());
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
