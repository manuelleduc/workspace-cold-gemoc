package fr.mleduc.util

import fr.mleduc.explicitOperations.Model
import org.jgrapht.Graph
import org.jgrapht.graph.DefaultEdge
import org.jgrapht.graph.SimpleDirectedGraph
import org.jgrapht.alg.CycleDetector

class Model2Graph {
	public def Graph<String, DefaultEdge> languagesGraph(Model model) {
		val languages = model.languages.toList

		val Graph<String, DefaultEdge> graph = new SimpleDirectedGraph(DefaultEdge)

		languages.forEach[graph.addVertex(it.name)]

		for (l : languages) {
			for (d : l.dependencies) {
				if (l.name != d.type.name)
					graph.addEdge(l.name, d.type.name)
			}
		}
		graph
	}
	
	public def <A,B> boolean isAcyclic(Graph<A,B> graph) {
		new CycleDetector(graph)
		false
	}
}
