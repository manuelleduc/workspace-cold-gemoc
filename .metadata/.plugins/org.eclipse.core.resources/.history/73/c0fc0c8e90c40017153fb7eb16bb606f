package fr.mleduc.generator

import fr.mleduc.explicitOperations.Model
import org.jgrapht.Graph
import org.jgrapht.graph.DefaultEdge
import org.jgrapht.graph.SimpleGraph
import org.jgrapht.traverse.DepthFirstIterator

class LanguageBuildPlanGenerator {
	def buildPlan(Model model) {
		val languages = model.languages

		val Graph<String, DefaultEdge> graph = new SimpleGraph(DefaultEdge)

		languages.forEach[graph.addVertex(it.name)]
		languages.forEach [ f |
			f.dependencies.forEach [
				graph.addEdge(f.name, it.type.name)
			]
		]
		languages.map[f | f.dependencies.map[(f.name -> it.name)]].flatten.forEach[p|graph.addEdge(p.key, p.value)]
		val dfi = new DepthFirstIterator(graph).toList

		'''
			«FOR x : dfi»
				«x»
			«ENDFOR»
		'''
	}
}
