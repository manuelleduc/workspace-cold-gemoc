/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.formatting2

import com.google.inject.Inject
import fr.mleduc.explicitOperations.And
import fr.mleduc.explicitOperations.Artifact
import fr.mleduc.explicitOperations.ArtifactParameter
import fr.mleduc.explicitOperations.AtomicFeature
import fr.mleduc.explicitOperations.Cardinality
import fr.mleduc.explicitOperations.Composition
import fr.mleduc.explicitOperations.CompositionParameter
import fr.mleduc.explicitOperations.Equiv
import fr.mleduc.explicitOperations.ExplicitOperationsPackage
import fr.mleduc.explicitOperations.FeatureModel
import fr.mleduc.explicitOperations.Imply
import fr.mleduc.explicitOperations.Language
import fr.mleduc.explicitOperations.LanguageDependency
import fr.mleduc.explicitOperations.Model
import fr.mleduc.explicitOperations.Not
import fr.mleduc.explicitOperations.OneOf
import fr.mleduc.explicitOperations.Operation
import fr.mleduc.explicitOperations.OperationParameter
import fr.mleduc.explicitOperations.Or
import fr.mleduc.explicitOperations.SomeOf
import fr.mleduc.explicitOperations.Variable
import fr.mleduc.services.ExplicitOperationsGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ExplicitOperationsFormatter extends AbstractFormatter2 {

	@Inject extension ExplicitOperationsGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		for (Language languages : model.getLanguages()) {
			languages.format;
		}
		for (Operation operations : model.getOperations()) {
			operations.format;
		}
		for (Artifact artifacts : model.getArtifacts()) {
			artifacts.format;
		}
		for (Composition compositions : model.getCompositions()) {
			compositions.format;
		}
	}

	def dispatch void format(Operation operation, extension IFormattableDocument document) {

		interior(operation, [indent])

		operation.regionFor.keyword('inputs').append[newLine]
		operation.regionFor.keyword('output').append[newLine]

		operation.inputs.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]

		operation.getOutput.format;
	}

	def dispatch void format(OperationParameter operationParameter, extension IFormattableDocument document) {
		operationParameter.regionFor.keyword(':').prepend[noSpace].append[oneSpace]
		operationParameter.cardinality.format
	}

	def dispatch void format(Cardinality cardinality, extension IFormattableDocument document) {
		cardinality.regionFor.keyword('[').prepend[oneSpace].append[noSpace]
		cardinality.regionFor.keyword('..').prepend[noSpace].append[noSpace]
		cardinality.regionFor.keyword(']').prepend[noSpace]
	}

	def dispatch void format(Artifact artifact, extension IFormattableDocument document) {
		artifact.regionFor.keyword('artifact').append[oneSpace]
		artifact.regionFor.keyword(':').append[oneSpace].prepend[noSpace]

		interior(
			artifact.regionFor.keyword('[').prepend[oneSpace].append[newLine],
			artifact.regionFor.keyword(']'),
			[indent]
		)

		artifact.parameters.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]
	}

	def dispatch void format(ArtifactParameter artifactParameter, extension IFormattableDocument document) {
		artifactParameter.regionFor.keyword('=>').surround[oneSpace]
	}

	def dispatch void format(Language language, extension IFormattableDocument document) {
		interior(language, [indent])
		language.regionFor.feature(ExplicitOperationsPackage.Literals.LANGUAGE__NAME).append[newLine]
		language.dependencies.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]
	}

	def dispatch void format(LanguageDependency languageDependency, extension IFormattableDocument document) {
		languageDependency.regionFor.keyword(':').prepend[noSpace].append[oneSpace]
	}

	def dispatch void format(Composition composition, extension IFormattableDocument document) {
		composition.regionFor.keyword('composition').append[oneSpace]
		composition.regionFor.keyword('::').append[oneSpace].prepend[oneSpace]
		interior(
			composition.regionFor.keyword('[').prepend[oneSpace].append[newLine],
			composition.regionFor.keyword(']'),
			[indent]
		)

		composition.parameters.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]
	}

	def dispatch void format(CompositionParameter compositionParameter, extension IFormattableDocument document) {
		compositionParameter.regionFor.keyword('=>').surround[oneSpace]
	}

	def dispatch void format(FeatureModel featureModel, extension IFormattableDocument document) {
		featureModel.regionFor.keyword('FM').prepend[noSpace].append[oneSpace]
		featureModel.feature.format
	}

	def dispatch void format(AtomicFeature compositionParameter, extension IFormattableDocument document) {
		compositionParameter.regionFor.keyword('?').prepend[noSpace].append[oneSpace]
		compositionParameter.regionFor.keyword('(').prepend[oneSpace].append[noSpace]
		compositionParameter.regionFor.keyword(')').prepend[noSpace].append[noSpace]
	}

	def dispatch void format(OneOf oneOf, extension IFormattableDocument document) {
		oneOf.regionFor.keyword('?').prepend[noSpace].append[oneSpace]
		oneOf.regionFor.keyword('(').prepend[oneSpace].append[noSpace]
		oneOf.regionFor.keyword(')').prepend[noSpace].append[noSpace]
		interior(
			oneOf.regionFor.keyword('[').prepend[oneSpace].append[newLine],
			oneOf.regionFor.keyword(']'),
			[indent]
		)

		oneOf.children.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]
	}

	def dispatch void format(SomeOf compositionParameter, extension IFormattableDocument document) {}

	def dispatch void format(Equiv compositionParameter, extension IFormattableDocument document) {}

	def dispatch void format(Imply compositionParameter, extension IFormattableDocument document) {}

	def dispatch void format(Or compositionParameter, extension IFormattableDocument document) {}

	def dispatch void format(And compositionParameter, extension IFormattableDocument document) {}

	def dispatch void format(Not compositionParameter, extension IFormattableDocument document) {}

	def dispatch void format(Variable compositionParameter, extension IFormattableDocument document) {}

}
