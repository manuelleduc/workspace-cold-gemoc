/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.formatting2

import com.google.inject.Inject
import fr.mleduc.explicitOperations.Artifact
import fr.mleduc.explicitOperations.Cardinality
import fr.mleduc.explicitOperations.Composition
import fr.mleduc.explicitOperations.CompositionParameter
import fr.mleduc.explicitOperations.ExplicitOperationsPackage
import fr.mleduc.explicitOperations.Language
import fr.mleduc.explicitOperations.LanguageDependency
import fr.mleduc.explicitOperations.Model
import fr.mleduc.explicitOperations.Operation
import fr.mleduc.explicitOperations.OperationParameter
import fr.mleduc.services.ExplicitOperationsGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ExplicitOperationsFormatter extends AbstractFormatter2 {

	@Inject extension ExplicitOperationsGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		for (Language languages : model.getLanguages()) {
			languages.format;
		}
		for (Operation operations : model.getOperations()) {
			operations.format;
		}
		for (Artifact artifacts : model.getArtifacts()) {
			artifacts.format;
		}
		for (Composition compositions : model.getCompositions()) {
			compositions.format;
		}
	}

	def dispatch void format(Operation operation, extension IFormattableDocument document) {

		interior(operation, [indent])

		operation.regionFor.keyword('inputs').append[newLine]
		operation.regionFor.keyword('output').append[newLine]

		operation.inputs.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]

		operation.getOutput.format;
	}

	def dispatch void format(OperationParameter operationParameter, extension IFormattableDocument document) {
		operationParameter.regionFor.keyword(':').prepend[noSpace].append[oneSpace]
		operationParameter.cardinality.format
	}

	def dispatch void format(Cardinality cardinality, extension IFormattableDocument document) {
		cardinality.regionFor.keyword('[').prepend[oneSpace].append[noSpace]
		cardinality.regionFor.keyword('..').prepend[noSpace].append[noSpace]
		cardinality.regionFor.keyword(']').prepend[noSpace]
	}

	def dispatch void format(Artifact artifact, extension IFormattableDocument document) {
		artifact.regionFor.keyword('artifact').append[oneSpace]
		artifact.regionFor.keyword(':').append[oneSpace].prepend[noSpace]
		ar
	}

	def dispatch void format(Language language, extension IFormattableDocument document) {
		interior(language, [indent])
		language.regionFor.feature(ExplicitOperationsPackage.Literals.LANGUAGE__NAME).append[newLine]
		language.dependencies.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]
		
		
	}

	def dispatch void format(LanguageDependency languageDependency, extension IFormattableDocument document) {
		languageDependency.regionFor.keyword(':').prepend[noSpace].append[oneSpace]
	}

	def dispatch void format(Composition composition, extension IFormattableDocument document) {
		composition.regionFor.keyword('composition').append[oneSpace]
		composition.regionFor.keyword('::').append[oneSpace].prepend[oneSpace]
		interior(
			composition.regionFor.keyword('[').prepend[oneSpace].append[newLine],
			composition.regionFor.keyword(']'),
			[indent]
		)

		composition.parameters.forEach [
			format
			append[setNewLines(1, 1, 2)]
			prepend[noSpace]
		]
	}

	def dispatch void format(CompositionParameter compositionParameter, extension IFormattableDocument document) {
		compositionParameter.regionFor.keyword('=>').surround[oneSpace]

	}
}
