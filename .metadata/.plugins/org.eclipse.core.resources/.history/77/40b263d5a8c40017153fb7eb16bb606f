/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.scoping

import fr.mleduc.explicitOperations.Composition
import fr.mleduc.explicitOperations.CompositionParameter
import fr.mleduc.explicitOperations.ExplicitOperationsPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.MapBasedScope
import fr.mleduc.explicitOperations.ArtifactParameter
import fr.mleduc.explicitOperations.Artifact

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ExplicitOperationsScopeProvider extends AbstractExplicitOperationsScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		return if (reference == ExplicitOperationsPackage.Literals.COMPOSITION_PARAMETER__NAME) {
			val cp = context as CompositionParameter
			val composition = cp.eContainer as Composition
			val map = composition.operation.inputs.map[EObjectDescription::create(it.name, it)]
			MapBasedScope::createScope(IScope::NULLSCOPE, map)
		} else if (reference == ExplicitOperationsPackage.Literals.ARTIFACT_PARAMETER__NAME) {
			val ap = context as ArtifactParameter
			val artifact = ap.eContainer as Artifact
			val map = artifact.type.dependencies.map[EObjectDescription::create(it.name, it)]
			MapBasedScope::createScope(IScope::NULLSCOPE, map)
		} else {
			super.getScope(context, reference)
		}
	}
}
