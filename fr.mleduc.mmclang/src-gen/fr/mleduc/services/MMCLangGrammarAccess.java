/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MMCLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MMCLang.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOperationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_2_0 = (RuleCall)cOperationsAssignment_2.eContents().get(0);
		
		//Composition:
		//	'package' name=ID
		//	operations+=Operation*;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID operations+=Operation*
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_2() { return cOperationsAssignment_2; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_2_0() { return cOperationsOperationParserRuleCall_2_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MMCLang.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMergeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMergeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMetamodelAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cMetamodelMetamodelCrossReference_0_2_0 = (CrossReference)cMetamodelAssignment_0_2.eContents().get(0);
		private final RuleCall cMetamodelMetamodelIDTerminalRuleCall_0_2_0_1 = (RuleCall)cMetamodelMetamodelCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cRenamingKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cPairsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_0_3_1_0 = (RuleCall)cPairsAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSliceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSliceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMetamodelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMetamodelMetamodelCrossReference_1_2_0 = (CrossReference)cMetamodelAssignment_1_2.eContents().get(0);
		private final RuleCall cMetamodelMetamodelIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMetamodelMetamodelCrossReference_1_2_0.eContents().get(1);
		private final Keyword cOnKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTargetsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cTargetsClassCrossReference_1_4_0 = (CrossReference)cTargetsAssignment_1_4.eContents().get(0);
		private final RuleCall cTargetsClassIDTerminalRuleCall_1_4_0_1 = (RuleCall)cTargetsClassCrossReference_1_4_0.eContents().get(1);
		
		//Operation:
		//	{Merge} 'merge' metamodel=[mmLang::Metamodel] ('renaming' pairs+=Pair)? | {Slice} 'slice'
		//	metamodel=[mmLang::Metamodel] 'on' targets+=[mmLang::Class]*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Merge} 'merge' metamodel=[mmLang::Metamodel] ('renaming' pairs+=Pair)? | {Slice} 'slice' metamodel=[mmLang::Metamodel]
		//'on' targets+=[mmLang::Class]*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Merge} 'merge' metamodel=[mmLang::Metamodel] ('renaming' pairs+=Pair)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Merge}
		public Action getMergeAction_0_0() { return cMergeAction_0_0; }
		
		//'merge'
		public Keyword getMergeKeyword_0_1() { return cMergeKeyword_0_1; }
		
		//metamodel=[mmLang::Metamodel]
		public Assignment getMetamodelAssignment_0_2() { return cMetamodelAssignment_0_2; }
		
		//[mmLang::Metamodel]
		public CrossReference getMetamodelMetamodelCrossReference_0_2_0() { return cMetamodelMetamodelCrossReference_0_2_0; }
		
		//ID
		public RuleCall getMetamodelMetamodelIDTerminalRuleCall_0_2_0_1() { return cMetamodelMetamodelIDTerminalRuleCall_0_2_0_1; }
		
		//('renaming' pairs+=Pair)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'renaming'
		public Keyword getRenamingKeyword_0_3_0() { return cRenamingKeyword_0_3_0; }
		
		//pairs+=Pair
		public Assignment getPairsAssignment_0_3_1() { return cPairsAssignment_0_3_1; }
		
		//Pair
		public RuleCall getPairsPairParserRuleCall_0_3_1_0() { return cPairsPairParserRuleCall_0_3_1_0; }
		
		//{Slice} 'slice' metamodel=[mmLang::Metamodel] 'on' targets+=[mmLang::Class]*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Slice}
		public Action getSliceAction_1_0() { return cSliceAction_1_0; }
		
		//'slice'
		public Keyword getSliceKeyword_1_1() { return cSliceKeyword_1_1; }
		
		//metamodel=[mmLang::Metamodel]
		public Assignment getMetamodelAssignment_1_2() { return cMetamodelAssignment_1_2; }
		
		//[mmLang::Metamodel]
		public CrossReference getMetamodelMetamodelCrossReference_1_2_0() { return cMetamodelMetamodelCrossReference_1_2_0; }
		
		//ID
		public RuleCall getMetamodelMetamodelIDTerminalRuleCall_1_2_0_1() { return cMetamodelMetamodelIDTerminalRuleCall_1_2_0_1; }
		
		//'on'
		public Keyword getOnKeyword_1_3() { return cOnKeyword_1_3; }
		
		//targets+=[mmLang::Class]*
		public Assignment getTargetsAssignment_1_4() { return cTargetsAssignment_1_4; }
		
		//[mmLang::Class]
		public CrossReference getTargetsClassCrossReference_1_4_0() { return cTargetsClassCrossReference_1_4_0; }
		
		//ID
		public RuleCall getTargetsClassIDTerminalRuleCall_1_4_0_1() { return cTargetsClassIDTerminalRuleCall_1_4_0_1; }
	}
	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MMCLang.Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromClassCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromClassIDTerminalRuleCall_0_0_1 = (RuleCall)cFromClassCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Pair:
		//	from=[mmLang::Class] '=>' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//from=[mmLang::Class] '=>' name=ID
		public Group getGroup() { return cGroup; }
		
		//from=[mmLang::Class]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//[mmLang::Class]
		public CrossReference getFromClassCrossReference_0_0() { return cFromClassCrossReference_0_0; }
		
		//ID
		public RuleCall getFromClassIDTerminalRuleCall_0_0_1() { return cFromClassIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	
	private final CompositionElements pComposition;
	private final OperationElements pOperation;
	private final PairElements pPair;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MMCLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComposition = new CompositionElements();
		this.pOperation = new OperationElements();
		this.pPair = new PairElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.MMCLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Composition:
	//	'package' name=ID
	//	operations+=Operation*;
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//Operation:
	//	{Merge} 'merge' metamodel=[mmLang::Metamodel] ('renaming' pairs+=Pair)? | {Slice} 'slice'
	//	metamodel=[mmLang::Metamodel] 'on' targets+=[mmLang::Class]*;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Pair:
	//	from=[mmLang::Class] '=>' name=ID;
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
