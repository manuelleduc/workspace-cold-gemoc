/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.serializer;

import com.google.inject.Inject;
import fr.mleduc.mMCLang.Composition;
import fr.mleduc.mMCLang.MMCLangPackage;
import fr.mleduc.mMCLang.Merge;
import fr.mleduc.mMCLang.Pair;
import fr.mleduc.mMCLang.Slice;
import fr.mleduc.services.MMCLangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MMCLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MMCLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MMCLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MMCLangPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case MMCLangPackage.MERGE:
				sequence_Operation(context, (Merge) semanticObject); 
				return; 
			case MMCLangPackage.PAIR:
				sequence_Pair(context, (Pair) semanticObject); 
				return; 
			case MMCLangPackage.SLICE:
				sequence_Operation(context, (Slice) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (name=ID operations+=Operation*)
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Merge
	 *
	 * Constraint:
	 *     (metamodel=[Metamodel|ID] pairs+=Pair?)
	 */
	protected void sequence_Operation(ISerializationContext context, Merge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Slice
	 *
	 * Constraint:
	 *     (metamodel=[Metamodel|ID] targets+=[Class|ID]*)
	 */
	protected void sequence_Operation(ISerializationContext context, Slice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pair returns Pair
	 *
	 * Constraint:
	 *     (from=[Class|ID] name=ID)
	 */
	protected void sequence_Pair(ISerializationContext context, Pair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMCLangPackage.Literals.PAIR__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMCLangPackage.Literals.PAIR__FROM));
			if (transientValues.isValueTransient(semanticObject, MMCLangPackage.Literals.PAIR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMCLangPackage.Literals.PAIR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPairAccess().getFromClassIDTerminalRuleCall_0_0_1(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getPairAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
