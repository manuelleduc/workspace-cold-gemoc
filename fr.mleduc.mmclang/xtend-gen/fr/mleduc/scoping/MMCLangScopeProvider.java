/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.scoping;

import com.google.common.base.Objects;
import fr.mleduc.mMCLang.MMCLangPackage;
import fr.mleduc.mMCLang.Operation;
import fr.mleduc.mMCLang.Slice;
import fr.mleduc.mMLang.Metamodel;
import fr.mleduc.scoping.AbstractMMCLangScopeProvider;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MMCLangScopeProvider extends AbstractMMCLangScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    EReference _pair_From = MMCLangPackage.eINSTANCE.getPair_From();
    boolean _equals = Objects.equal(reference, _pair_From);
    if (_equals) {
      IScope _scope = super.getScope(context, reference);
      EObject _eContainer = context.eContainer();
      Metamodel _metamodel = ((Operation) _eContainer).getMetamodel();
      EList<fr.mleduc.mMLang.Class> _classes = _metamodel.getClasses();
      final Function1<fr.mleduc.mMLang.Class, IEObjectDescription> _function = (fr.mleduc.mMLang.Class it) -> {
        String _name = it.getName();
        return EObjectDescription.create(_name, it);
      };
      List<IEObjectDescription> _map = ListExtensions.<fr.mleduc.mMLang.Class, IEObjectDescription>map(_classes, _function);
      _xifexpression = MapBasedScope.createScope(_scope, _map);
    } else {
      IScope _xifexpression_1 = null;
      EReference _slice_Targets = MMCLangPackage.eINSTANCE.getSlice_Targets();
      boolean _equals_1 = Objects.equal(reference, _slice_Targets);
      if (_equals_1) {
        IScope _scope_1 = super.getScope(context, reference);
        Metamodel _metamodel_1 = ((Slice) context).getMetamodel();
        EList<fr.mleduc.mMLang.Class> _classes_1 = _metamodel_1.getClasses();
        final Function1<fr.mleduc.mMLang.Class, IEObjectDescription> _function_1 = (fr.mleduc.mMLang.Class it) -> {
          String _name = it.getName();
          return EObjectDescription.create(_name, it);
        };
        List<IEObjectDescription> _map_1 = ListExtensions.<fr.mleduc.mMLang.Class, IEObjectDescription>map(_classes_1, _function_1);
        _xifexpression_1 = MapBasedScope.createScope(_scope_1, _map_1);
      } else {
        _xifexpression_1 = super.getScope(context, reference);
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
