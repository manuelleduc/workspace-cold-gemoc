/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import fr.mleduc.explicitOperations.Artifact;
import fr.mleduc.explicitOperations.ArtifactParameter;
import fr.mleduc.explicitOperations.Composition;
import fr.mleduc.explicitOperations.CompositionParameter;
import fr.mleduc.explicitOperations.ExplicitOperationsPackage;
import fr.mleduc.explicitOperations.Feature;
import fr.mleduc.explicitOperations.Language;
import fr.mleduc.explicitOperations.LanguageDependency;
import fr.mleduc.explicitOperations.Model;
import fr.mleduc.explicitOperations.Operation;
import fr.mleduc.explicitOperations.OperationParameter;
import fr.mleduc.scoping.AbstractExplicitOperationsScopeProvider;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ExplicitOperationsScopeProvider extends AbstractExplicitOperationsScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    boolean _equals = Objects.equal(reference, ExplicitOperationsPackage.Literals.COMPOSITION_PARAMETER__NAME);
    if (_equals) {
      IScope _xblockexpression = null;
      {
        final CompositionParameter cp = ((CompositionParameter) context);
        EObject _eContainer = cp.eContainer();
        final Composition composition = ((Composition) _eContainer);
        Operation _operation = composition.getOperation();
        EList<OperationParameter> _inputs = _operation.getInputs();
        final Function1<OperationParameter, IEObjectDescription> _function = (OperationParameter it) -> {
          String _name = it.getName();
          return EObjectDescription.create(_name, it);
        };
        final List<IEObjectDescription> map = ListExtensions.<OperationParameter, IEObjectDescription>map(_inputs, _function);
        _xblockexpression = MapBasedScope.createScope(IScope.NULLSCOPE, map);
      }
      _xifexpression = _xblockexpression;
    } else {
      IScope _xifexpression_1 = null;
      boolean _equals_1 = Objects.equal(reference, ExplicitOperationsPackage.Literals.ARTIFACT_PARAMETER__NAME);
      if (_equals_1) {
        IScope _xblockexpression_1 = null;
        {
          final ArtifactParameter ap = ((ArtifactParameter) context);
          EObject _eContainer = ap.eContainer();
          final Artifact artifact = ((Artifact) _eContainer);
          Language _type = artifact.getType();
          EList<LanguageDependency> _dependencies = _type.getDependencies();
          final Function1<LanguageDependency, IEObjectDescription> _function = (LanguageDependency it) -> {
            String _name = it.getName();
            return EObjectDescription.create(_name, it);
          };
          final List<IEObjectDescription> map = ListExtensions.<LanguageDependency, IEObjectDescription>map(_dependencies, _function);
          _xblockexpression_1 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        IScope _xifexpression_2 = null;
        boolean _equals_2 = Objects.equal(reference, ExplicitOperationsPackage.Literals.VARIABLE__REF);
        if (_equals_2) {
          IScope _xblockexpression_2 = null;
          {
            EObject _rootContainer = EcoreUtil2.getRootContainer(context);
            final Model root = ((Model) _rootContainer);
            TreeIterator<EObject> _eAllContents = root.eAllContents();
            Iterator<Feature> _filter = Iterators.<Feature>filter(_eAllContents, Feature.class);
            final Function1<Feature, IEObjectDescription> _function = (Feature it) -> {
              String _name = it.getName();
              return EObjectDescription.create(_name, it);
            };
            Iterator<IEObjectDescription> _map = IteratorExtensions.<Feature, IEObjectDescription>map(_filter, _function);
            final List<IEObjectDescription> map = IteratorExtensions.<IEObjectDescription>toList(_map);
            _xblockexpression_2 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
          }
          _xifexpression_2 = _xblockexpression_2;
        } else {
          IScope _xifexpression_3 = null;
          boolean _equals_3 = Objects.equal(reference, ExplicitOperationsPackage.Literals.ACTIVATION__CONSTRAINTS);
          if (_equals_3) {
            IScope _xblockexpression_3 = null;
            {
              EObject _rootContainer = EcoreUtil2.getRootContainer(context);
              final Model root = ((Model) _rootContainer);
              TreeIterator<EObject> _eAllContents = root.eAllContents();
              Iterator<Feature> _filter = Iterators.<Feature>filter(_eAllContents, Feature.class);
              final Function1<Feature, IEObjectDescription> _function = (Feature it) -> {
                String _name = it.getName();
                return EObjectDescription.create(_name, it);
              };
              Iterator<IEObjectDescription> _map = IteratorExtensions.<Feature, IEObjectDescription>map(_filter, _function);
              final List<IEObjectDescription> map = IteratorExtensions.<IEObjectDescription>toList(_map);
              _xblockexpression_3 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
            }
            _xifexpression_3 = _xblockexpression_3;
          } else {
            _xifexpression_3 = super.getScope(context, reference);
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
