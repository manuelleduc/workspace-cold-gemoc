/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.formatting2;

import com.google.inject.Inject;
import fr.mleduc.explicitOperations.And;
import fr.mleduc.explicitOperations.Artifact;
import fr.mleduc.explicitOperations.ArtifactParameter;
import fr.mleduc.explicitOperations.AtomicFeature;
import fr.mleduc.explicitOperations.Cardinality;
import fr.mleduc.explicitOperations.Composition;
import fr.mleduc.explicitOperations.CompositionParameter;
import fr.mleduc.explicitOperations.Equiv;
import fr.mleduc.explicitOperations.ExplicitOperationsPackage;
import fr.mleduc.explicitOperations.Feature;
import fr.mleduc.explicitOperations.FeatureModel;
import fr.mleduc.explicitOperations.Imply;
import fr.mleduc.explicitOperations.Language;
import fr.mleduc.explicitOperations.LanguageDependency;
import fr.mleduc.explicitOperations.Model;
import fr.mleduc.explicitOperations.Not;
import fr.mleduc.explicitOperations.OneOf;
import fr.mleduc.explicitOperations.Operation;
import fr.mleduc.explicitOperations.OperationParameter;
import fr.mleduc.explicitOperations.Or;
import fr.mleduc.explicitOperations.SomeOf;
import fr.mleduc.explicitOperations.Variable;
import fr.mleduc.services.ExplicitOperationsGrammarAccess;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class ExplicitOperationsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ExplicitOperationsGrammarAccess _explicitOperationsGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Language> _languages = model.getLanguages();
    for (final Language languages : _languages) {
      document.<Language>format(languages);
    }
    EList<Operation> _operations = model.getOperations();
    for (final Operation operations : _operations) {
      document.<Operation>format(operations);
    }
    EList<Artifact> _artifacts = model.getArtifacts();
    for (final Artifact artifacts : _artifacts) {
      document.<Artifact>format(artifacts);
    }
    EList<Composition> _compositions = model.getCompositions();
    for (final Composition compositions : _compositions) {
      document.<Composition>format(compositions);
    }
    EList<FeatureModel> _featureModels = model.getFeatureModels();
    for (final FeatureModel fm : _featureModels) {
      document.<FeatureModel>format(fm);
    }
  }
  
  protected void _format(final Operation operation, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Operation>interior(operation, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(operation);
    ISemanticRegion _keyword = _regionFor.keyword("inputs");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(operation);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("output");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_1, _function_2);
    EList<OperationParameter> _inputs = operation.getInputs();
    final Consumer<OperationParameter> _function_3 = (OperationParameter it) -> {
      document.<OperationParameter>format(it);
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1, 1, 2);
      };
      document.<OperationParameter>append(it, _function_4);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.<OperationParameter>prepend(it, _function_5);
    };
    _inputs.forEach(_function_3);
    OperationParameter _output = operation.getOutput();
    document.<OperationParameter>format(_output);
  }
  
  protected void _format(final OperationParameter operationParameter, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(operationParameter);
    ISemanticRegion _keyword = _regionFor.keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    Cardinality _cardinality = operationParameter.getCardinality();
    document.<Cardinality>format(_cardinality);
  }
  
  protected void _format(final Cardinality cardinality, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(cardinality);
    ISemanticRegion _keyword = _regionFor.keyword("[");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(cardinality);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("..");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(cardinality);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_2, _function_4);
  }
  
  protected void _format(final Artifact artifact, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(artifact);
    ISemanticRegion _keyword = _regionFor.keyword("artifact");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(artifact);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _append = document.append(_keyword_1, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_append, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(artifact);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("[");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword_2, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    ISemanticRegion _append_1 = document.append(_prepend, _function_4);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(artifact);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(_append_1, _keyword_3, _function_5);
    EList<ArtifactParameter> _parameters = artifact.getParameters();
    final Consumer<ArtifactParameter> _function_6 = (ArtifactParameter it) -> {
      document.<ArtifactParameter>format(it);
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1, 1, 2);
      };
      document.<ArtifactParameter>append(it, _function_7);
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.<ArtifactParameter>prepend(it, _function_8);
    };
    _parameters.forEach(_function_6);
  }
  
  protected void _format(final ArtifactParameter artifactParameter, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(artifactParameter);
    ISemanticRegion _keyword = _regionFor.keyword("=>");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword, _function);
  }
  
  protected void _format(final Language language, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Language>interior(language, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(language);
    ISemanticRegion _feature = _regionFor.feature(ExplicitOperationsPackage.Literals.LANGUAGE__NAME);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_feature, _function_1);
    EList<LanguageDependency> _dependencies = language.getDependencies();
    final Consumer<LanguageDependency> _function_2 = (LanguageDependency it) -> {
      document.<LanguageDependency>format(it);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1, 1, 2);
      };
      document.<LanguageDependency>append(it, _function_3);
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.<LanguageDependency>prepend(it, _function_4);
    };
    _dependencies.forEach(_function_2);
  }
  
  protected void _format(final LanguageDependency languageDependency, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(languageDependency);
    ISemanticRegion _keyword = _regionFor.keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
  }
  
  protected void _format(final Composition composition, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(composition);
    ISemanticRegion _keyword = _regionFor.keyword("composition");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(composition);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("::");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _append = document.append(_keyword_1, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_append, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(composition);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("[");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword_2, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    ISemanticRegion _append_1 = document.append(_prepend, _function_4);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(composition);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    ISemanticRegion _append_2 = document.append(_keyword_3, _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(_append_1, _append_2, _function_6);
    EList<CompositionParameter> _parameters = composition.getParameters();
    final Consumer<CompositionParameter> _function_7 = (CompositionParameter it) -> {
      document.<CompositionParameter>format(it);
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1, 1, 2);
      };
      document.<CompositionParameter>append(it, _function_8);
      final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.<CompositionParameter>prepend(it, _function_9);
    };
    _parameters.forEach(_function_7);
  }
  
  protected void _format(final CompositionParameter compositionParameter, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(compositionParameter);
    ISemanticRegion _keyword = _regionFor.keyword("=>");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword, _function);
  }
  
  protected void _format(final FeatureModel featureModel, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(featureModel);
    ISemanticRegion _keyword = _regionFor.keyword("FM");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    Feature _feature = featureModel.getFeature();
    document.<Feature>format(_feature);
  }
  
  protected void _format(final AtomicFeature compositionParameter, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(compositionParameter);
    ISemanticRegion _keyword = _regionFor.keyword("?");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(compositionParameter);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(compositionParameter);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_2 = document.prepend(_keyword_2, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_2, _function_5);
  }
  
  protected void _format(final OneOf oneOf, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(oneOf);
    ISemanticRegion _keyword = _regionFor.keyword("?");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(oneOf);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(oneOf);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_2 = document.prepend(_keyword_2, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_2, _function_5);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(oneOf);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("[");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend_3 = document.prepend(_keyword_3, _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    ISemanticRegion _append = document.append(_prepend_3, _function_7);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(oneOf);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(_append, _keyword_4, _function_8);
    EList<Feature> _children = oneOf.getChildren();
    final Consumer<Feature> _function_9 = (Feature it) -> {
      document.<Feature>format(it);
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1, 1, 2);
      };
      document.<Feature>append(it, _function_10);
      final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.<Feature>prepend(it, _function_11);
    };
    _children.forEach(_function_9);
  }
  
  protected void _format(final SomeOf someOf, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(someOf);
    ISemanticRegion _keyword = _regionFor.keyword("?");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(someOf);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(someOf);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_2 = document.prepend(_keyword_2, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_prepend_2, _function_5);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(someOf);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("[");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend_3 = document.prepend(_keyword_3, _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    ISemanticRegion _append = document.append(_prepend_3, _function_7);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(someOf);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(_append, _keyword_4, _function_8);
    EList<Feature> _children = someOf.getChildren();
    final Consumer<Feature> _function_9 = (Feature it) -> {
      document.<Feature>format(it);
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1, 1, 2);
      };
      document.<Feature>append(it, _function_10);
      final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.<Feature>prepend(it, _function_11);
    };
    _children.forEach(_function_9);
  }
  
  protected void _format(final Equiv equiv, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(equiv);
    ISemanticRegion _keyword = _regionFor.keyword("<=>");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword, _function);
  }
  
  protected void _format(final Imply imply, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(imply);
    ISemanticRegion _keyword = _regionFor.keyword("=>");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword, _function);
  }
  
  protected void _format(final Or or, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(or);
    ISemanticRegion _keyword = _regionFor.keyword("or");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword, _function);
  }
  
  protected void _format(final And and, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(and);
    ISemanticRegion _keyword = _regionFor.keyword("and");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword, _function);
  }
  
  protected void _format(final Not compositionParameter, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final Variable compositionParameter, @Extension final IFormattableDocument document) {
  }
  
  public void format(final Object and, final IFormattableDocument document) {
    if (and instanceof XtextResource) {
      _format((XtextResource)and, document);
      return;
    } else if (and instanceof And) {
      _format((And)and, document);
      return;
    } else if (and instanceof Artifact) {
      _format((Artifact)and, document);
      return;
    } else if (and instanceof AtomicFeature) {
      _format((AtomicFeature)and, document);
      return;
    } else if (and instanceof Composition) {
      _format((Composition)and, document);
      return;
    } else if (and instanceof Equiv) {
      _format((Equiv)and, document);
      return;
    } else if (and instanceof Imply) {
      _format((Imply)and, document);
      return;
    } else if (and instanceof Not) {
      _format((Not)and, document);
      return;
    } else if (and instanceof OneOf) {
      _format((OneOf)and, document);
      return;
    } else if (and instanceof Or) {
      _format((Or)and, document);
      return;
    } else if (and instanceof SomeOf) {
      _format((SomeOf)and, document);
      return;
    } else if (and instanceof Variable) {
      _format((Variable)and, document);
      return;
    } else if (and instanceof ArtifactParameter) {
      _format((ArtifactParameter)and, document);
      return;
    } else if (and instanceof Cardinality) {
      _format((Cardinality)and, document);
      return;
    } else if (and instanceof CompositionParameter) {
      _format((CompositionParameter)and, document);
      return;
    } else if (and instanceof FeatureModel) {
      _format((FeatureModel)and, document);
      return;
    } else if (and instanceof Language) {
      _format((Language)and, document);
      return;
    } else if (and instanceof LanguageDependency) {
      _format((LanguageDependency)and, document);
      return;
    } else if (and instanceof Model) {
      _format((Model)and, document);
      return;
    } else if (and instanceof Operation) {
      _format((Operation)and, document);
      return;
    } else if (and instanceof OperationParameter) {
      _format((OperationParameter)and, document);
      return;
    } else if (and instanceof EObject) {
      _format((EObject)and, document);
      return;
    } else if (and == null) {
      _format((Void)null, document);
      return;
    } else if (and != null) {
      _format(and, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(and, document).toString());
    }
  }
}
