/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExplicitOperationsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cLanguagesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cLanguagesLanguageParserRuleCall_2_0_0 = (RuleCall)cLanguagesAssignment_2_0.eContents().get(0);
		private final Assignment cOperationsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_2_1_0 = (RuleCall)cOperationsAssignment_2_1.eContents().get(0);
		private final Assignment cArtifactsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cArtifactsArtifactParserRuleCall_2_2_0 = (RuleCall)cArtifactsAssignment_2_2.eContents().get(0);
		private final Assignment cCompositionsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cCompositionsCompositionParserRuleCall_2_3_0 = (RuleCall)cCompositionsAssignment_2_3.eContents().get(0);
		private final Assignment cFeatureModelsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cFeatureModelsFeatureModelParserRuleCall_2_4_0 = (RuleCall)cFeatureModelsAssignment_2_4.eContents().get(0);
		private final Assignment cActivationsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cActivationsActivationParserRuleCall_2_5_0 = (RuleCall)cActivationsAssignment_2_5.eContents().get(0);
		
		//Model:
		//	'package' name=ID (languages+=Language | operations+=Operation | artifacts+=Artifact | compositions+=Composition |
		//	featureModels+=FeatureModel | activations+=Activation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID (languages+=Language | operations+=Operation | artifacts+=Artifact | compositions+=Composition |
		//featureModels+=FeatureModel | activations+=Activation)*
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(languages+=Language | operations+=Operation | artifacts+=Artifact | compositions+=Composition |
		//featureModels+=FeatureModel | activations+=Activation)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//languages+=Language
		public Assignment getLanguagesAssignment_2_0() { return cLanguagesAssignment_2_0; }
		
		//Language
		public RuleCall getLanguagesLanguageParserRuleCall_2_0_0() { return cLanguagesLanguageParserRuleCall_2_0_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_2_1() { return cOperationsAssignment_2_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_2_1_0() { return cOperationsOperationParserRuleCall_2_1_0; }
		
		//artifacts+=Artifact
		public Assignment getArtifactsAssignment_2_2() { return cArtifactsAssignment_2_2; }
		
		//Artifact
		public RuleCall getArtifactsArtifactParserRuleCall_2_2_0() { return cArtifactsArtifactParserRuleCall_2_2_0; }
		
		//compositions+=Composition
		public Assignment getCompositionsAssignment_2_3() { return cCompositionsAssignment_2_3; }
		
		//Composition
		public RuleCall getCompositionsCompositionParserRuleCall_2_3_0() { return cCompositionsCompositionParserRuleCall_2_3_0; }
		
		//featureModels+=FeatureModel
		public Assignment getFeatureModelsAssignment_2_4() { return cFeatureModelsAssignment_2_4; }
		
		//FeatureModel
		public RuleCall getFeatureModelsFeatureModelParserRuleCall_2_4_0() { return cFeatureModelsFeatureModelParserRuleCall_2_4_0; }
		
		//activations+=Activation
		public Assignment getActivationsAssignment_2_5() { return cActivationsAssignment_2_5; }
		
		//Activation
		public RuleCall getActivationsActivationParserRuleCall_2_5_0() { return cActivationsActivationParserRuleCall_2_5_0; }
	}
	public class ActivationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Activation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferencesReferentiableCrossReference_1_0 = (CrossReference)cReferencesAssignment_1.eContents().get(0);
		private final RuleCall cReferencesReferentiableIDTerminalRuleCall_1_0_1 = (RuleCall)cReferencesReferentiableCrossReference_1_0.eContents().get(1);
		private final Keyword cWhereKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsPropositionParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		
		//Activation:
		//	'activate' references+=[Referentiable]* 'where' constraints=Proposition;
		@Override public ParserRule getRule() { return rule; }
		
		//'activate' references+=[Referentiable]* 'where' constraints=Proposition
		public Group getGroup() { return cGroup; }
		
		//'activate'
		public Keyword getActivateKeyword_0() { return cActivateKeyword_0; }
		
		//references+=[Referentiable]*
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }
		
		//[Referentiable]
		public CrossReference getReferencesReferentiableCrossReference_1_0() { return cReferencesReferentiableCrossReference_1_0; }
		
		//ID
		public RuleCall getReferencesReferentiableIDTerminalRuleCall_1_0_1() { return cReferencesReferentiableIDTerminalRuleCall_1_0_1; }
		
		//'where'
		public Keyword getWhereKeyword_2() { return cWhereKeyword_2; }
		
		//constraints=Proposition
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//Proposition
		public RuleCall getConstraintsPropositionParserRuleCall_3_0() { return cConstraintsPropositionParserRuleCall_3_0; }
	}
	public class FeatureModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.FeatureModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureFeatureParserRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		
		//FeatureModel:
		//	'FM' name=ID feature=Feature;
		@Override public ParserRule getRule() { return rule; }
		
		//'FM' name=ID feature=Feature
		public Group getGroup() { return cGroup; }
		
		//'FM'
		public Keyword getFMKeyword_0() { return cFMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//feature=Feature
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_2_0() { return cFeatureFeatureParserRuleCall_2_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOneOfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSomeOfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Feature:
		//	AtomicFeature | OneOf | SomeOf;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicFeature | OneOf | SomeOf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomicFeature
		public RuleCall getAtomicFeatureParserRuleCall_0() { return cAtomicFeatureParserRuleCall_0; }
		
		//OneOf
		public RuleCall getOneOfParserRuleCall_1() { return cOneOfParserRuleCall_1; }
		
		//SomeOf
		public RuleCall getSomeOfParserRuleCall_2() { return cSomeOfParserRuleCall_2; }
	}
	public class AtomicFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.AtomicFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtomicFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cFeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstraintsPropositionParserRuleCall_4_1_0 = (RuleCall)cConstraintsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//AtomicFeature Feature:
		//	{AtomicFeature} optional?='?'? 'feature' name=ID ('(' constraints=Proposition ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{AtomicFeature} optional?='?'? 'feature' name=ID ('(' constraints=Proposition ')')?
		public Group getGroup() { return cGroup; }
		
		//{AtomicFeature}
		public Action getAtomicFeatureAction_0() { return cAtomicFeatureAction_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }
		
		//'feature'
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' constraints=Proposition ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//constraints=Proposition
		public Assignment getConstraintsAssignment_4_1() { return cConstraintsAssignment_4_1; }
		
		//Proposition
		public RuleCall getConstraintsPropositionParserRuleCall_4_1_0() { return cConstraintsPropositionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class OneOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.OneOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOneOfAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cOneOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenFeatureParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConstraintsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConstraintsPropositionParserRuleCall_7_1_0 = (RuleCall)cConstraintsAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//OneOf Feature:
		//	{OneOf} optional?='?'? 'oneOf' name=ID '[' children+=Feature* ']' ('(' constraints=Proposition ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{OneOf} optional?='?'? 'oneOf' name=ID '[' children+=Feature* ']' ('(' constraints=Proposition ')')?
		public Group getGroup() { return cGroup; }
		
		//{OneOf}
		public Action getOneOfAction_0() { return cOneOfAction_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }
		
		//'oneOf'
		public Keyword getOneOfKeyword_2() { return cOneOfKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//children+=Feature*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }
		
		//Feature
		public RuleCall getChildrenFeatureParserRuleCall_5_0() { return cChildrenFeatureParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//('(' constraints=Proposition ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//constraints=Proposition
		public Assignment getConstraintsAssignment_7_1() { return cConstraintsAssignment_7_1; }
		
		//Proposition
		public RuleCall getConstraintsPropositionParserRuleCall_7_1_0() { return cConstraintsPropositionParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}
	public class SomeOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.SomeOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSomeOfAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cSomeOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChildrenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildrenFeatureParserRuleCall_5_0 = (RuleCall)cChildrenAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConstraintsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConstraintsPropositionParserRuleCall_7_1_0 = (RuleCall)cConstraintsAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//SomeOf Feature:
		//	{SomeOf} optional?='?'? 'someOf' name=ID '[' children+=Feature* ']' ('(' constraints=Proposition ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{SomeOf} optional?='?'? 'someOf' name=ID '[' children+=Feature* ']' ('(' constraints=Proposition ')')?
		public Group getGroup() { return cGroup; }
		
		//{SomeOf}
		public Action getSomeOfAction_0() { return cSomeOfAction_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }
		
		//'someOf'
		public Keyword getSomeOfKeyword_2() { return cSomeOfKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//children+=Feature*
		public Assignment getChildrenAssignment_5() { return cChildrenAssignment_5; }
		
		//Feature
		public RuleCall getChildrenFeatureParserRuleCall_5_0() { return cChildrenFeatureParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//('(' constraints=Proposition ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//constraints=Proposition
		public Assignment getConstraintsAssignment_7_1() { return cConstraintsAssignment_7_1; }
		
		//Proposition
		public RuleCall getConstraintsPropositionParserRuleCall_7_1_0() { return cConstraintsPropositionParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}
	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Proposition");
		private final RuleCall cEquivParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Proposition:
		//	Equiv;
		@Override public ParserRule getRule() { return rule; }
		
		//Equiv
		public RuleCall getEquivParserRuleCall() { return cEquivParserRuleCall; }
	}
	public class EquivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Equiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImplyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEquivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImplyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equiv Proposition:
		//	Imply ({Equiv.left=current} '<=>' right=Imply)*
		@Override public ParserRule getRule() { return rule; }
		
		//Imply ({Equiv.left=current} '<=>' right=Imply)*
		public Group getGroup() { return cGroup; }
		
		//Imply
		public RuleCall getImplyParserRuleCall_0() { return cImplyParserRuleCall_0; }
		
		//({Equiv.left=current} '<=>' right=Imply)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equiv.left=current}
		public Action getEquivLeftAction_1_0() { return cEquivLeftAction_1_0; }
		
		//'<=>'
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_1() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Imply
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Imply
		public RuleCall getRightImplyParserRuleCall_1_2_0() { return cRightImplyParserRuleCall_1_2_0; }
	}
	public class ImplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Imply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplyLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Imply Proposition:
		//	Or ({Imply.left=current} '=>' right=Or)*
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({Imply.left=current} '=>' right=Or)*
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({Imply.left=current} '=>' right=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Imply.left=current}
		public Action getImplyLeftAction_1_0() { return cImplyLeftAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Or
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or
		public RuleCall getRightOrParserRuleCall_1_2_0() { return cRightOrParserRuleCall_1_2_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Proposition:
		//	And ({Or.left=current} 'or' right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} 'or' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} 'or' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Proposition:
		//	Primary ({And.left=current} 'and' right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({And.left=current} 'and' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({And.left=current} 'and' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPropositionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextPrimaryParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefFeatureCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefFeatureIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefFeatureCrossReference_2_1_0.eContents().get(1);
		
		//Primary Proposition:
		//	'(' Proposition ')' | {Not} '!' next=Primary | {Variable} ref=[Feature]
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Proposition ')' | {Not} '!' next=Primary | {Variable} ref=[Feature]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Proposition ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Proposition
		public RuleCall getPropositionParserRuleCall_0_1() { return cPropositionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} '!' next=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//next=Primary
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }
		
		//Primary
		public RuleCall getNextPrimaryParserRuleCall_1_2_0() { return cNextPrimaryParserRuleCall_1_2_0; }
		
		//{Variable} ref=[Feature]
		public Group getGroup_2() { return cGroup_2; }
		
		//{Variable}
		public Action getVariableAction_2_0() { return cVariableAction_2_0; }
		
		//ref=[Feature]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }
		
		//[Feature]
		public CrossReference getRefFeatureCrossReference_2_1_0() { return cRefFeatureCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefFeatureIDTerminalRuleCall_2_1_0_1() { return cRefFeatureIDTerminalRuleCall_2_1_0_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInputsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsOperationParameterParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Keyword cOutputKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputOperationParameterParserRuleCall_5_0 = (RuleCall)cOutputAssignment_5.eContents().get(0);
		
		/// **
		// * External to the language CS
		// * / Operation:
		//	'operation' name=ID
		//	'inputs'
		//	inputs+=OperationParameter*
		//	'output'
		//	output=OperationParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' name=ID 'inputs' inputs+=OperationParameter* 'output' output=OperationParameter
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'inputs'
		public Keyword getInputsKeyword_2() { return cInputsKeyword_2; }
		
		//inputs+=OperationParameter*
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }
		
		//OperationParameter
		public RuleCall getInputsOperationParameterParserRuleCall_3_0() { return cInputsOperationParameterParserRuleCall_3_0; }
		
		//'output'
		public Keyword getOutputKeyword_4() { return cOutputKeyword_4; }
		
		//output=OperationParameter
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }
		
		//OperationParameter
		public RuleCall getOutputOperationParameterParserRuleCall_5_0() { return cOutputOperationParameterParserRuleCall_5_0; }
	}
	public class OperationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.OperationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLanguageCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLanguageIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeLanguageCrossReference_2_0.eContents().get(1);
		private final Assignment cCardinalityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinalityCardinalityParserRuleCall_3_0 = (RuleCall)cCardinalityAssignment_3.eContents().get(0);
		
		//OperationParameter:
		//	name=ID ':' type=[Language] cardinality=Cardinality;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Language] cardinality=Cardinality
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[Language]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Language]
		public CrossReference getTypeLanguageCrossReference_2_0() { return cTypeLanguageCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeLanguageIDTerminalRuleCall_2_0_1() { return cTypeLanguageIDTerminalRuleCall_2_0_1; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_3() { return cCardinalityAssignment_3; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_3_0() { return cCardinalityCardinalityParserRuleCall_3_0; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartCardValParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStopAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStopCardValParserRuleCall_3_0 = (RuleCall)cStopAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Cardinality:
		//	'[' start=CardVal '..' stop=CardVal ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' start=CardVal '..' stop=CardVal ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//start=CardVal
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//CardVal
		public RuleCall getStartCardValParserRuleCall_1_0() { return cStartCardValParserRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//stop=CardVal
		public Assignment getStopAssignment_3() { return cStopAssignment_3; }
		
		//CardVal
		public RuleCall getStopCardValParserRuleCall_3_0() { return cStopCardValParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class CardValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.CardVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCardVal0Action_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDigitZeroKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCardVal1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDigitOneKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCardValNAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//CardVal:
		//	{CardVal0} '0' | {CardVal1} '1' | {CardValN} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{CardVal0} '0' | {CardVal1} '1' | {CardValN} '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CardVal0} '0'
		public Group getGroup_0() { return cGroup_0; }
		
		//{CardVal0}
		public Action getCardVal0Action_0_0() { return cCardVal0Action_0_0; }
		
		//'0'
		public Keyword getDigitZeroKeyword_0_1() { return cDigitZeroKeyword_0_1; }
		
		//{CardVal1} '1'
		public Group getGroup_1() { return cGroup_1; }
		
		//{CardVal1}
		public Action getCardVal1Action_1_0() { return cCardVal1Action_1_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_1_1() { return cDigitOneKeyword_1_1; }
		
		//{CardValN} '*'
		public Group getGroup_2() { return cGroup_2; }
		
		//{CardValN}
		public Action getCardValNAction_2_0() { return cCardValNAction_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }
	}
	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Language");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDependenciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependenciesLanguageDependencyParserRuleCall_2_0 = (RuleCall)cDependenciesAssignment_2.eContents().get(0);
		
		//Language:
		//	'language' name=ID
		//	dependencies+=LanguageDependency*;
		@Override public ParserRule getRule() { return rule; }
		
		//'language' name=ID dependencies+=LanguageDependency*
		public Group getGroup() { return cGroup; }
		
		//'language'
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//dependencies+=LanguageDependency*
		public Assignment getDependenciesAssignment_2() { return cDependenciesAssignment_2; }
		
		//LanguageDependency
		public RuleCall getDependenciesLanguageDependencyParserRuleCall_2_0() { return cDependenciesLanguageDependencyParserRuleCall_2_0; }
	}
	public class LanguageDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.LanguageDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLanguageCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLanguageIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeLanguageCrossReference_2_0.eContents().get(1);
		
		/// **
		// * Internal to the language CS
		// * / LanguageDependency:
		//	name=ID ':' type=[Language];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Language]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[Language]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Language]
		public CrossReference getTypeLanguageCrossReference_2_0() { return cTypeLanguageCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeLanguageIDTerminalRuleCall_2_0_1() { return cTypeLanguageIDTerminalRuleCall_2_0_1; }
	}
	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Artifact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeLanguageCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeLanguageIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeLanguageCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersArtifactParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Artifact:
		//	'artifact' name=ID ':' type=[Language] ('[' parameters+=ArtifactParameter* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'artifact' name=ID ':' type=[Language] ('[' parameters+=ArtifactParameter* ']')?
		public Group getGroup() { return cGroup; }
		
		//'artifact'
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[Language]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Language]
		public CrossReference getTypeLanguageCrossReference_3_0() { return cTypeLanguageCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeLanguageIDTerminalRuleCall_3_0_1() { return cTypeLanguageIDTerminalRuleCall_3_0_1; }
		
		//('[' parameters+=ArtifactParameter* ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//parameters+=ArtifactParameter*
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//ArtifactParameter
		public RuleCall getParametersArtifactParameterParserRuleCall_4_1_0() { return cParametersArtifactParameterParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class ArtifactParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.ArtifactParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameLanguageDependencyCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameLanguageDependencyIDTerminalRuleCall_0_0_1 = (RuleCall)cNameLanguageDependencyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArtifactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArtifactReferentiableCrossReference_2_0 = (CrossReference)cArtifactAssignment_2.eContents().get(0);
		private final RuleCall cArtifactReferentiableIDTerminalRuleCall_2_0_1 = (RuleCall)cArtifactReferentiableCrossReference_2_0.eContents().get(1);
		
		//ArtifactParameter:
		//	name=[LanguageDependency] '=>' artifact=[Referentiable];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[LanguageDependency] '=>' artifact=[Referentiable]
		public Group getGroup() { return cGroup; }
		
		//name=[LanguageDependency]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[LanguageDependency]
		public CrossReference getNameLanguageDependencyCrossReference_0_0() { return cNameLanguageDependencyCrossReference_0_0; }
		
		//ID
		public RuleCall getNameLanguageDependencyIDTerminalRuleCall_0_0_1() { return cNameLanguageDependencyIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//artifact=[Referentiable]
		public Assignment getArtifactAssignment_2() { return cArtifactAssignment_2; }
		
		//[Referentiable]
		public CrossReference getArtifactReferentiableCrossReference_2_0() { return cArtifactReferentiableCrossReference_2_0; }
		
		//ID
		public RuleCall getArtifactReferentiableIDTerminalRuleCall_2_0_1() { return cArtifactReferentiableIDTerminalRuleCall_2_0_1; }
	}
	public class ReferentiableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Referentiable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArtifactParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Referentiable:
		//	Artifact | Composition;
		@Override public ParserRule getRule() { return rule; }
		
		//Artifact | Composition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Artifact
		public RuleCall getArtifactParserRuleCall_0() { return cArtifactParserRuleCall_0; }
		
		//Composition
		public RuleCall getCompositionParserRuleCall_1() { return cCompositionParserRuleCall_1; }
	}
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOperationOperationCrossReference_3_0 = (CrossReference)cOperationAssignment_3.eContents().get(0);
		private final RuleCall cOperationOperationIDTerminalRuleCall_3_0_1 = (RuleCall)cOperationOperationCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersCompositionParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Composition:
		//	'composition' name=ID '::' operation=[Operation] '['
		//	parameters+=CompositionParameter* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'composition' name=ID '::' operation=[Operation] '[' parameters+=CompositionParameter* ']'
		public Group getGroup() { return cGroup; }
		
		//'composition'
		public Keyword getCompositionKeyword_0() { return cCompositionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//operation=[Operation]
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//[Operation]
		public CrossReference getOperationOperationCrossReference_3_0() { return cOperationOperationCrossReference_3_0; }
		
		//ID
		public RuleCall getOperationOperationIDTerminalRuleCall_3_0_1() { return cOperationOperationIDTerminalRuleCall_3_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//parameters+=CompositionParameter*
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//CompositionParameter
		public RuleCall getParametersCompositionParameterParserRuleCall_5_0() { return cParametersCompositionParameterParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class CompositionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ExplicitOperations.CompositionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameOperationParameterCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameOperationParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cNameOperationParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArtifactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArtifactReferentiableCrossReference_2_0 = (CrossReference)cArtifactAssignment_2.eContents().get(0);
		private final RuleCall cArtifactReferentiableIDTerminalRuleCall_2_0_1 = (RuleCall)cArtifactReferentiableCrossReference_2_0.eContents().get(1);
		
		//CompositionParameter:
		//	name=[OperationParameter] '=>' artifact=[Referentiable];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[OperationParameter] '=>' artifact=[Referentiable]
		public Group getGroup() { return cGroup; }
		
		//name=[OperationParameter]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[OperationParameter]
		public CrossReference getNameOperationParameterCrossReference_0_0() { return cNameOperationParameterCrossReference_0_0; }
		
		//ID
		public RuleCall getNameOperationParameterIDTerminalRuleCall_0_0_1() { return cNameOperationParameterIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//artifact=[Referentiable]
		public Assignment getArtifactAssignment_2() { return cArtifactAssignment_2; }
		
		//[Referentiable]
		public CrossReference getArtifactReferentiableCrossReference_2_0() { return cArtifactReferentiableCrossReference_2_0; }
		
		//ID
		public RuleCall getArtifactReferentiableIDTerminalRuleCall_2_0_1() { return cArtifactReferentiableIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final ActivationElements pActivation;
	private final FeatureModelElements pFeatureModel;
	private final FeatureElements pFeature;
	private final AtomicFeatureElements pAtomicFeature;
	private final OneOfElements pOneOf;
	private final SomeOfElements pSomeOf;
	private final PropositionElements pProposition;
	private final EquivElements pEquiv;
	private final ImplyElements pImply;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PrimaryElements pPrimary;
	private final OperationElements pOperation;
	private final OperationParameterElements pOperationParameter;
	private final CardinalityElements pCardinality;
	private final CardValElements pCardVal;
	private final LanguageElements pLanguage;
	private final LanguageDependencyElements pLanguageDependency;
	private final ArtifactElements pArtifact;
	private final ArtifactParameterElements pArtifactParameter;
	private final ReferentiableElements pReferentiable;
	private final CompositionElements pComposition;
	private final CompositionParameterElements pCompositionParameter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExplicitOperationsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pActivation = new ActivationElements();
		this.pFeatureModel = new FeatureModelElements();
		this.pFeature = new FeatureElements();
		this.pAtomicFeature = new AtomicFeatureElements();
		this.pOneOf = new OneOfElements();
		this.pSomeOf = new SomeOfElements();
		this.pProposition = new PropositionElements();
		this.pEquiv = new EquivElements();
		this.pImply = new ImplyElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPrimary = new PrimaryElements();
		this.pOperation = new OperationElements();
		this.pOperationParameter = new OperationParameterElements();
		this.pCardinality = new CardinalityElements();
		this.pCardVal = new CardValElements();
		this.pLanguage = new LanguageElements();
		this.pLanguageDependency = new LanguageDependencyElements();
		this.pArtifact = new ArtifactElements();
		this.pArtifactParameter = new ArtifactParameterElements();
		this.pReferentiable = new ReferentiableElements();
		this.pComposition = new CompositionElements();
		this.pCompositionParameter = new CompositionParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.ExplicitOperations".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'package' name=ID (languages+=Language | operations+=Operation | artifacts+=Artifact | compositions+=Composition |
	//	featureModels+=FeatureModel | activations+=Activation)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Activation:
	//	'activate' references+=[Referentiable]* 'where' constraints=Proposition;
	public ActivationElements getActivationAccess() {
		return pActivation;
	}
	
	public ParserRule getActivationRule() {
		return getActivationAccess().getRule();
	}
	
	//FeatureModel:
	//	'FM' name=ID feature=Feature;
	public FeatureModelElements getFeatureModelAccess() {
		return pFeatureModel;
	}
	
	public ParserRule getFeatureModelRule() {
		return getFeatureModelAccess().getRule();
	}
	
	//Feature:
	//	AtomicFeature | OneOf | SomeOf;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//AtomicFeature Feature:
	//	{AtomicFeature} optional?='?'? 'feature' name=ID ('(' constraints=Proposition ')')?
	public AtomicFeatureElements getAtomicFeatureAccess() {
		return pAtomicFeature;
	}
	
	public ParserRule getAtomicFeatureRule() {
		return getAtomicFeatureAccess().getRule();
	}
	
	//OneOf Feature:
	//	{OneOf} optional?='?'? 'oneOf' name=ID '[' children+=Feature* ']' ('(' constraints=Proposition ')')?
	public OneOfElements getOneOfAccess() {
		return pOneOf;
	}
	
	public ParserRule getOneOfRule() {
		return getOneOfAccess().getRule();
	}
	
	//SomeOf Feature:
	//	{SomeOf} optional?='?'? 'someOf' name=ID '[' children+=Feature* ']' ('(' constraints=Proposition ')')?
	public SomeOfElements getSomeOfAccess() {
		return pSomeOf;
	}
	
	public ParserRule getSomeOfRule() {
		return getSomeOfAccess().getRule();
	}
	
	//Proposition:
	//	Equiv;
	public PropositionElements getPropositionAccess() {
		return pProposition;
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}
	
	//Equiv Proposition:
	//	Imply ({Equiv.left=current} '<=>' right=Imply)*
	public EquivElements getEquivAccess() {
		return pEquiv;
	}
	
	public ParserRule getEquivRule() {
		return getEquivAccess().getRule();
	}
	
	//Imply Proposition:
	//	Or ({Imply.left=current} '=>' right=Or)*
	public ImplyElements getImplyAccess() {
		return pImply;
	}
	
	public ParserRule getImplyRule() {
		return getImplyAccess().getRule();
	}
	
	//Or Proposition:
	//	And ({Or.left=current} 'or' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Proposition:
	//	Primary ({And.left=current} 'and' right=Primary)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Primary Proposition:
	//	'(' Proposition ')' | {Not} '!' next=Primary | {Variable} ref=[Feature]
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	/// **
	// * External to the language CS
	// * / Operation:
	//	'operation' name=ID
	//	'inputs'
	//	inputs+=OperationParameter*
	//	'output'
	//	output=OperationParameter;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//OperationParameter:
	//	name=ID ':' type=[Language] cardinality=Cardinality;
	public OperationParameterElements getOperationParameterAccess() {
		return pOperationParameter;
	}
	
	public ParserRule getOperationParameterRule() {
		return getOperationParameterAccess().getRule();
	}
	
	//Cardinality:
	//	'[' start=CardVal '..' stop=CardVal ']';
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//CardVal:
	//	{CardVal0} '0' | {CardVal1} '1' | {CardValN} '*';
	public CardValElements getCardValAccess() {
		return pCardVal;
	}
	
	public ParserRule getCardValRule() {
		return getCardValAccess().getRule();
	}
	
	//Language:
	//	'language' name=ID
	//	dependencies+=LanguageDependency*;
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	/// **
	// * Internal to the language CS
	// * / LanguageDependency:
	//	name=ID ':' type=[Language];
	public LanguageDependencyElements getLanguageDependencyAccess() {
		return pLanguageDependency;
	}
	
	public ParserRule getLanguageDependencyRule() {
		return getLanguageDependencyAccess().getRule();
	}
	
	//Artifact:
	//	'artifact' name=ID ':' type=[Language] ('[' parameters+=ArtifactParameter* ']')?;
	public ArtifactElements getArtifactAccess() {
		return pArtifact;
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}
	
	//ArtifactParameter:
	//	name=[LanguageDependency] '=>' artifact=[Referentiable];
	public ArtifactParameterElements getArtifactParameterAccess() {
		return pArtifactParameter;
	}
	
	public ParserRule getArtifactParameterRule() {
		return getArtifactParameterAccess().getRule();
	}
	
	//Referentiable:
	//	Artifact | Composition;
	public ReferentiableElements getReferentiableAccess() {
		return pReferentiable;
	}
	
	public ParserRule getReferentiableRule() {
		return getReferentiableAccess().getRule();
	}
	
	//Composition:
	//	'composition' name=ID '::' operation=[Operation] '['
	//	parameters+=CompositionParameter* ']';
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//CompositionParameter:
	//	name=[OperationParameter] '=>' artifact=[Referentiable];
	public CompositionParameterElements getCompositionParameterAccess() {
		return pCompositionParameter;
	}
	
	public ParserRule getCompositionParameterRule() {
		return getCompositionParameterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
