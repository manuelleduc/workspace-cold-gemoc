/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.mleduc.ide.contentassist.antlr.internal.InternalExplicitOperationsParser;
import fr.mleduc.services.ExplicitOperationsGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ExplicitOperationsParser extends AbstractContentAssistParser {

	@Inject
	private ExplicitOperationsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalExplicitOperationsParser createParser() {
		InternalExplicitOperationsParser result = new InternalExplicitOperationsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_2(), "rule__Model__Alternatives_2");
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getCardValAccess().getAlternatives(), "rule__CardVal__Alternatives");
					put(grammarAccess.getReferentiableAccess().getAlternatives(), "rule__Referentiable__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getActivationAccess().getGroup(), "rule__Activation__Group__0");
					put(grammarAccess.getFeatureModelAccess().getGroup(), "rule__FeatureModel__Group__0");
					put(grammarAccess.getAtomicFeatureAccess().getGroup(), "rule__AtomicFeature__Group__0");
					put(grammarAccess.getAtomicFeatureAccess().getGroup_4(), "rule__AtomicFeature__Group_4__0");
					put(grammarAccess.getOneOfAccess().getGroup(), "rule__OneOf__Group__0");
					put(grammarAccess.getOneOfAccess().getGroup_7(), "rule__OneOf__Group_7__0");
					put(grammarAccess.getSomeOfAccess().getGroup(), "rule__SomeOf__Group__0");
					put(grammarAccess.getSomeOfAccess().getGroup_7(), "rule__SomeOf__Group_7__0");
					put(grammarAccess.getEquivAccess().getGroup(), "rule__Equiv__Group__0");
					put(grammarAccess.getEquivAccess().getGroup_1(), "rule__Equiv__Group_1__0");
					put(grammarAccess.getImplyAccess().getGroup(), "rule__Imply__Group__0");
					put(grammarAccess.getImplyAccess().getGroup_1(), "rule__Imply__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationParameterAccess().getGroup(), "rule__OperationParameter__Group__0");
					put(grammarAccess.getCardinalityAccess().getGroup(), "rule__Cardinality__Group__0");
					put(grammarAccess.getCardValAccess().getGroup_0(), "rule__CardVal__Group_0__0");
					put(grammarAccess.getCardValAccess().getGroup_1(), "rule__CardVal__Group_1__0");
					put(grammarAccess.getCardValAccess().getGroup_2(), "rule__CardVal__Group_2__0");
					put(grammarAccess.getLanguageAccess().getGroup(), "rule__Language__Group__0");
					put(grammarAccess.getLanguageDependencyAccess().getGroup(), "rule__LanguageDependency__Group__0");
					put(grammarAccess.getArtifactAccess().getGroup(), "rule__Artifact__Group__0");
					put(grammarAccess.getArtifactAccess().getGroup_4(), "rule__Artifact__Group_4__0");
					put(grammarAccess.getArtifactParameterAccess().getGroup(), "rule__ArtifactParameter__Group__0");
					put(grammarAccess.getCompositionAccess().getGroup(), "rule__Composition__Group__0");
					put(grammarAccess.getCompositionParameterAccess().getGroup(), "rule__CompositionParameter__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getLanguagesAssignment_2_0(), "rule__Model__LanguagesAssignment_2_0");
					put(grammarAccess.getModelAccess().getOperationsAssignment_2_1(), "rule__Model__OperationsAssignment_2_1");
					put(grammarAccess.getModelAccess().getArtifactsAssignment_2_2(), "rule__Model__ArtifactsAssignment_2_2");
					put(grammarAccess.getModelAccess().getCompositionsAssignment_2_3(), "rule__Model__CompositionsAssignment_2_3");
					put(grammarAccess.getModelAccess().getFeatureModelsAssignment_2_4(), "rule__Model__FeatureModelsAssignment_2_4");
					put(grammarAccess.getModelAccess().getActivationsAssignment_2_5(), "rule__Model__ActivationsAssignment_2_5");
					put(grammarAccess.getActivationAccess().getReferencesAssignment_1(), "rule__Activation__ReferencesAssignment_1");
					put(grammarAccess.getActivationAccess().getConstraintsAssignment_3(), "rule__Activation__ConstraintsAssignment_3");
					put(grammarAccess.getFeatureModelAccess().getNameAssignment_1(), "rule__FeatureModel__NameAssignment_1");
					put(grammarAccess.getFeatureModelAccess().getFeatureAssignment_2(), "rule__FeatureModel__FeatureAssignment_2");
					put(grammarAccess.getAtomicFeatureAccess().getOptionalAssignment_1(), "rule__AtomicFeature__OptionalAssignment_1");
					put(grammarAccess.getAtomicFeatureAccess().getNameAssignment_3(), "rule__AtomicFeature__NameAssignment_3");
					put(grammarAccess.getAtomicFeatureAccess().getConstraintsAssignment_4_1(), "rule__AtomicFeature__ConstraintsAssignment_4_1");
					put(grammarAccess.getOneOfAccess().getOptionalAssignment_1(), "rule__OneOf__OptionalAssignment_1");
					put(grammarAccess.getOneOfAccess().getNameAssignment_3(), "rule__OneOf__NameAssignment_3");
					put(grammarAccess.getOneOfAccess().getChildrenAssignment_5(), "rule__OneOf__ChildrenAssignment_5");
					put(grammarAccess.getOneOfAccess().getConstraintsAssignment_7_1(), "rule__OneOf__ConstraintsAssignment_7_1");
					put(grammarAccess.getSomeOfAccess().getOptionalAssignment_1(), "rule__SomeOf__OptionalAssignment_1");
					put(grammarAccess.getSomeOfAccess().getNameAssignment_3(), "rule__SomeOf__NameAssignment_3");
					put(grammarAccess.getSomeOfAccess().getChildrenAssignment_5(), "rule__SomeOf__ChildrenAssignment_5");
					put(grammarAccess.getSomeOfAccess().getConstraintsAssignment_7_1(), "rule__SomeOf__ConstraintsAssignment_7_1");
					put(grammarAccess.getEquivAccess().getRightAssignment_1_2(), "rule__Equiv__RightAssignment_1_2");
					put(grammarAccess.getImplyAccess().getRightAssignment_1_2(), "rule__Imply__RightAssignment_1_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getNextAssignment_1_2(), "rule__Primary__NextAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getRefAssignment_2_1(), "rule__Primary__RefAssignment_2_1");
					put(grammarAccess.getOperationAccess().getNameAssignment_1(), "rule__Operation__NameAssignment_1");
					put(grammarAccess.getOperationAccess().getInputsAssignment_3(), "rule__Operation__InputsAssignment_3");
					put(grammarAccess.getOperationAccess().getOutputAssignment_5(), "rule__Operation__OutputAssignment_5");
					put(grammarAccess.getOperationParameterAccess().getNameAssignment_0(), "rule__OperationParameter__NameAssignment_0");
					put(grammarAccess.getOperationParameterAccess().getTypeAssignment_2(), "rule__OperationParameter__TypeAssignment_2");
					put(grammarAccess.getOperationParameterAccess().getCardinalityAssignment_3(), "rule__OperationParameter__CardinalityAssignment_3");
					put(grammarAccess.getCardinalityAccess().getStartAssignment_1(), "rule__Cardinality__StartAssignment_1");
					put(grammarAccess.getCardinalityAccess().getStopAssignment_3(), "rule__Cardinality__StopAssignment_3");
					put(grammarAccess.getLanguageAccess().getNameAssignment_1(), "rule__Language__NameAssignment_1");
					put(grammarAccess.getLanguageAccess().getDependenciesAssignment_2(), "rule__Language__DependenciesAssignment_2");
					put(grammarAccess.getLanguageDependencyAccess().getNameAssignment_0(), "rule__LanguageDependency__NameAssignment_0");
					put(grammarAccess.getLanguageDependencyAccess().getTypeAssignment_2(), "rule__LanguageDependency__TypeAssignment_2");
					put(grammarAccess.getArtifactAccess().getNameAssignment_1(), "rule__Artifact__NameAssignment_1");
					put(grammarAccess.getArtifactAccess().getTypeAssignment_3(), "rule__Artifact__TypeAssignment_3");
					put(grammarAccess.getArtifactAccess().getParametersAssignment_4_1(), "rule__Artifact__ParametersAssignment_4_1");
					put(grammarAccess.getArtifactParameterAccess().getNameAssignment_0(), "rule__ArtifactParameter__NameAssignment_0");
					put(grammarAccess.getArtifactParameterAccess().getArtifactAssignment_2(), "rule__ArtifactParameter__ArtifactAssignment_2");
					put(grammarAccess.getCompositionAccess().getNameAssignment_1(), "rule__Composition__NameAssignment_1");
					put(grammarAccess.getCompositionAccess().getOperationAssignment_3(), "rule__Composition__OperationAssignment_3");
					put(grammarAccess.getCompositionAccess().getParametersAssignment_5(), "rule__Composition__ParametersAssignment_5");
					put(grammarAccess.getCompositionParameterAccess().getNameAssignment_0(), "rule__CompositionParameter__NameAssignment_0");
					put(grammarAccess.getCompositionParameterAccess().getArtifactAssignment_2(), "rule__CompositionParameter__ArtifactAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalExplicitOperationsParser typedParser = (InternalExplicitOperationsParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExplicitOperationsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExplicitOperationsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
