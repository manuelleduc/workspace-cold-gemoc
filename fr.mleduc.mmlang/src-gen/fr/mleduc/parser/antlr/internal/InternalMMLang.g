/*
 * generated by Xtext 2.10.0
 */
grammar InternalMMLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.mleduc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.mleduc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.mleduc.services.MMLangGrammarAccess;

}

@parser::members {

 	private MMLangGrammarAccess grammarAccess;

    public InternalMMLangParser(TokenStream input, MMLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Metamodel";
   	}

   	@Override
   	protected MMLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMetamodel
entryRuleMetamodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetamodelRule()); }
	iv_ruleMetamodel=ruleMetamodel
	{ $current=$iv_ruleMetamodel.current; }
	EOF;

// Rule Metamodel
ruleMetamodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_concrete_0_0='concrete'
				{
					newLeafNode(lv_concrete_0_0, grammarAccess.getMetamodelAccess().getConcreteConcreteKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetamodelRule());
					}
					setWithLastConsumed($current, "concrete", true, "concrete");
				}
			)
		)?
		otherlv_1='package'
		{
			newLeafNode(otherlv_1, grammarAccess.getMetamodelAccess().getPackageKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMetamodelAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetamodelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMetamodelAccess().getClassesClassParserRuleCall_3_0());
				}
				lv_classes_3_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMetamodelRule());
					}
					add(
						$current,
						"classes",
						lv_classes_3_0,
						"fr.mleduc.MMLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed($current, "abstract", true, "abstract");
				}
			)
		)?
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getClassAccess().getParentsClassCrossReference_3_1_0());
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getClassAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getClassRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getClassAccess().getParentsClassCrossReference_3_2_1_0());
						}
					)
				)
			)*
		)?
		(
			otherlv_7='<'
			{
				newLeafNode(otherlv_7, grammarAccess.getClassAccess().getLessThanSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getGenericsGenericParserRuleCall_4_1_0());
					}
					lv_generics_8_0=ruleGeneric
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"generics",
							lv_generics_8_0,
							"fr.mleduc.MMLang.Generic");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getClassAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getClassAccess().getGenericsGenericParserRuleCall_4_2_1_0());
						}
						lv_generics_10_0=ruleGeneric
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClassRule());
							}
							add(
								$current,
								"generics",
								lv_generics_10_0,
								"fr.mleduc.MMLang.Generic");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='>'
			{
				newLeafNode(otherlv_11, grammarAccess.getClassAccess().getGreaterThanSignKeyword_4_3());
			}
		)?
		otherlv_12='{'
		{
			newLeafNode(otherlv_12, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getFieldsFieldParserRuleCall_6_0());
				}
				lv_fields_13_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"fields",
						lv_fields_13_0,
						"fr.mleduc.MMLang.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleGeneric
entryRuleGeneric returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenericRule()); }
	iv_ruleGeneric=ruleGeneric
	{ $current=$iv_ruleGeneric.current; }
	EOF;

// Rule Generic
ruleGeneric returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getGenericAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getGenericRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_containment_0_0='@'
				{
					newLeafNode(lv_containment_0_0, grammarAccess.getFieldAccess().getContainmentCommercialAtKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed($current, "containment", true, "@");
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getTypeReferenceCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4='<'
			{
				newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getLessThanSignKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getFieldAccess().getGenericsReferenceCrossReference_4_1_0());
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getFieldAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
						}
						otherlv_7=RULE_ID
						{
							newLeafNode(otherlv_7, grammarAccess.getFieldAccess().getGenericsReferenceCrossReference_4_2_1_0());
						}
					)
				)
			)*
			otherlv_8='>'
			{
				newLeafNode(otherlv_8, grammarAccess.getFieldAccess().getGreaterThanSignKeyword_4_3());
			}
		)?
		otherlv_9='['
		{
			newLeafNode(otherlv_9, grammarAccess.getFieldAccess().getLeftSquareBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getStart_cardCardParserRuleCall_6_0());
				}
				lv_start_card_10_0=ruleCard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"start_card",
						lv_start_card_10_0,
						"fr.mleduc.MMLang.Card");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='..'
		{
			newLeafNode(otherlv_11, grammarAccess.getFieldAccess().getFullStopFullStopKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getStop_cardCardParserRuleCall_8_0());
				}
				lv_stop_card_12_0=ruleCard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"stop_card",
						lv_stop_card_12_0,
						"fr.mleduc.MMLang.Card");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13=']'
		{
			newLeafNode(otherlv_13, grammarAccess.getFieldAccess().getRightSquareBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleCard
entryRuleCard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardRule()); }
	iv_ruleCard=ruleCard
	{ $current=$iv_ruleCard.current; }
	EOF;

// Rule Card
ruleCard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCardAccess().getCard0Action_0_0(),
						$current);
				}
			)
			otherlv_1='0'
			{
				newLeafNode(otherlv_1, grammarAccess.getCardAccess().getDigitZeroKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCardAccess().getCard1Action_1_0(),
						$current);
				}
			)
			otherlv_3='1'
			{
				newLeafNode(otherlv_3, grammarAccess.getCardAccess().getDigitOneKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCardAccess().getCardInfAction_2_0(),
						$current);
				}
			)
			otherlv_5='*'
			{
				newLeafNode(otherlv_5, grammarAccess.getCardAccess().getAsteriskKeyword_2_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
