/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.serializer;

import com.google.inject.Inject;
import fr.mleduc.mMLang.Card0;
import fr.mleduc.mMLang.Card1;
import fr.mleduc.mMLang.CardInf;
import fr.mleduc.mMLang.Field;
import fr.mleduc.mMLang.Generic;
import fr.mleduc.mMLang.MMLangPackage;
import fr.mleduc.mMLang.Metamodel;
import fr.mleduc.services.MMLangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MMLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MMLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MMLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MMLangPackage.CARD0:
				sequence_Card(context, (Card0) semanticObject); 
				return; 
			case MMLangPackage.CARD1:
				sequence_Card(context, (Card1) semanticObject); 
				return; 
			case MMLangPackage.CARD_INF:
				sequence_Card(context, (CardInf) semanticObject); 
				return; 
			case MMLangPackage.CLASS:
				sequence_Class(context, (fr.mleduc.mMLang.Class) semanticObject); 
				return; 
			case MMLangPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case MMLangPackage.GENERIC:
				sequence_Generic(context, (Generic) semanticObject); 
				return; 
			case MMLangPackage.METAMODEL:
				sequence_Metamodel(context, (Metamodel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Card returns Card0
	 *
	 * Constraint:
	 *     {Card0}
	 */
	protected void sequence_Card(ISerializationContext context, Card0 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Card returns Card1
	 *
	 * Constraint:
	 *     {Card1}
	 */
	protected void sequence_Card(ISerializationContext context, Card1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Card returns CardInf
	 *
	 * Constraint:
	 *     {CardInf}
	 */
	protected void sequence_Card(ISerializationContext context, CardInf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (abstract?='abstract'? name=ID (parents+=[Class|ID] parents+=[Class|ID]*)? (generics+=Generic generics+=Generic*)? fields+=Field*)
	 */
	protected void sequence_Class(ISerializationContext context, fr.mleduc.mMLang.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (
	 *         containment?='@'? 
	 *         name=ID 
	 *         type=[Reference|ID] 
	 *         (generics+=[Reference|ID] generics+=[Reference|ID]*)? 
	 *         start_card=Card 
	 *         stop_card=Card
	 *     )
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Generic
	 *     Generic returns Generic
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Generic(ISerializationContext context, Generic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLangPackage.Literals.REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLangPackage.Literals.REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGenericAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Metamodel returns Metamodel
	 *
	 * Constraint:
	 *     (concrete?='concrete'? name=ID classes+=Class*)
	 */
	protected void sequence_Metamodel(ISerializationContext context, Metamodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
