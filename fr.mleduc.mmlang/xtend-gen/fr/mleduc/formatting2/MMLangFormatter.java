/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.formatting2;

import com.google.inject.Inject;
import fr.mleduc.mMLang.Field;
import fr.mleduc.mMLang.Generic;
import fr.mleduc.mMLang.Metamodel;
import fr.mleduc.services.MMLangGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class MMLangFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MMLangGrammarAccess _mMLangGrammarAccess;
  
  protected void _format(final Metamodel metamodel, @Extension final IFormattableDocument document) {
    EList<fr.mleduc.mMLang.Class> _classes = metamodel.getClasses();
    for (final fr.mleduc.mMLang.Class classes : _classes) {
      document.<fr.mleduc.mMLang.Class>format(classes);
    }
  }
  
  protected void _format(final fr.mleduc.mMLang.Class _class, @Extension final IFormattableDocument document) {
    EList<fr.mleduc.mMLang.Class> _parents = _class.getParents();
    for (final fr.mleduc.mMLang.Class parents : _parents) {
      document.<fr.mleduc.mMLang.Class>format(parents);
    }
    EList<Generic> _generics = _class.getGenerics();
    for (final Generic generics : _generics) {
      document.<Generic>format(generics);
    }
    EList<Field> _fields = _class.getFields();
    for (final Field fields : _fields) {
      document.<Field>format(fields);
    }
  }
  
  public void format(final Object _class, final IFormattableDocument document) {
    if (_class instanceof XtextResource) {
      _format((XtextResource)_class, document);
      return;
    } else if (_class instanceof fr.mleduc.mMLang.Class) {
      _format((fr.mleduc.mMLang.Class)_class, document);
      return;
    } else if (_class instanceof Metamodel) {
      _format((Metamodel)_class, document);
      return;
    } else if (_class instanceof EObject) {
      _format((EObject)_class, document);
      return;
    } else if (_class == null) {
      _format((Void)null, document);
      return;
    } else if (_class != null) {
      _format(_class, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(_class, document).toString());
    }
  }
}
