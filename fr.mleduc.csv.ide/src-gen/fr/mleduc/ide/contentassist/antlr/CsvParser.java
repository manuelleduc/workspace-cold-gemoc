/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.mleduc.ide.contentassist.antlr.internal.InternalCsvParser;
import fr.mleduc.services.CsvGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class CsvParser extends AbstractContentAssistParser {

	@Inject
	private CsvGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCsvParser createParser() {
		InternalCsvParser result = new InternalCsvParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCellAccess().getAlternatives(), "rule__Cell__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getLineAccess().getGroup_1(), "rule__Line__Group_1__0");
					put(grammarAccess.getCellAccess().getGroup_0(), "rule__Cell__Group_0__0");
					put(grammarAccess.getCellAccess().getGroup_1(), "rule__Cell__Group_1__0");
					put(grammarAccess.getModelAccess().getLinesAssignment_0(), "rule__Model__LinesAssignment_0");
					put(grammarAccess.getModelAccess().getLinesAssignment_1_1(), "rule__Model__LinesAssignment_1_1");
					put(grammarAccess.getLineAccess().getCellsAssignment_0(), "rule__Line__CellsAssignment_0");
					put(grammarAccess.getLineAccess().getCellsAssignment_1_1(), "rule__Line__CellsAssignment_1_1");
					put(grammarAccess.getCellAccess().getContentAssignment_0_1(), "rule__Cell__ContentAssignment_0_1");
					put(grammarAccess.getCellAccess().getContentAssignment_1_1(), "rule__Cell__ContentAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCsvParser typedParser = (InternalCsvParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CsvGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
