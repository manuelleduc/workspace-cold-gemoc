/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.mLang.impl;

import fr.mleduc.mLang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MLangFactoryImpl extends EFactoryImpl implements MLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MLangFactory init()
  {
    try
    {
      MLangFactory theMLangFactory = (MLangFactory)EPackage.Registry.INSTANCE.getEFactory(MLangPackage.eNS_URI);
      if (theMLangFactory != null)
      {
        return theMLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MLangPackage.MODEL: return createModel();
      case MLangPackage.INSTANCE: return createInstance();
      case MLangPackage.FIELD: return createField();
      case MLangPackage.VALUE: return createValue();
      case MLangPackage.FREE_VAL: return createFreeVal();
      case MLangPackage.STRING_VAL: return createStringVal();
      case MLangPackage.INT_VAL: return createIntVal();
      case MLangPackage.INSTANCE_VAL: return createInstanceVal();
      case MLangPackage.LIST_VAL: return createListVal();
      case MLangPackage.SET_VAL: return createSetVal();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance createInstance()
  {
    InstanceImpl instance = new InstanceImpl();
    return instance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FreeVal createFreeVal()
  {
    FreeValImpl freeVal = new FreeValImpl();
    return freeVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringVal createStringVal()
  {
    StringValImpl stringVal = new StringValImpl();
    return stringVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntVal createIntVal()
  {
    IntValImpl intVal = new IntValImpl();
    return intVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstanceVal createInstanceVal()
  {
    InstanceValImpl instanceVal = new InstanceValImpl();
    return instanceVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListVal createListVal()
  {
    ListValImpl listVal = new ListValImpl();
    return listVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetVal createSetVal()
  {
    SetValImpl setVal = new SetValImpl();
    return setVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MLangPackage getMLangPackage()
  {
    return (MLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MLangPackage getPackage()
  {
    return MLangPackage.eINSTANCE;
  }

} //MLangFactoryImpl
