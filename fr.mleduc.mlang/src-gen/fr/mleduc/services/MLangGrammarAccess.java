/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MLang.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMetamodelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMetamodelMetamodelCrossReference_3_0 = (CrossReference)cMetamodelAssignment_3.eContents().get(0);
		private final RuleCall cMetamodelMetamodelIDTerminalRuleCall_3_0_1 = (RuleCall)cMetamodelMetamodelCrossReference_3_0.eContents().get(1);
		private final Assignment cInstancesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstancesInstanceParserRuleCall_4_0 = (RuleCall)cInstancesAssignment_4.eContents().get(0);
		
		//Model:
		//	'model' name=ID 'metamodel' metamodel=[mmLang::Metamodel] instances+=Instance*;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID 'metamodel' metamodel=[mmLang::Metamodel] instances+=Instance*
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_2() { return cMetamodelKeyword_2; }
		
		//metamodel=[mmLang::Metamodel]
		public Assignment getMetamodelAssignment_3() { return cMetamodelAssignment_3; }
		
		//[mmLang::Metamodel]
		public CrossReference getMetamodelMetamodelCrossReference_3_0() { return cMetamodelMetamodelCrossReference_3_0; }
		
		//ID
		public RuleCall getMetamodelMetamodelIDTerminalRuleCall_3_0_1() { return cMetamodelMetamodelIDTerminalRuleCall_3_0_1; }
		
		//instances+=Instance*
		public Assignment getInstancesAssignment_4() { return cInstancesAssignment_4; }
		
		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_4_0() { return cInstancesInstanceParserRuleCall_4_0; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MLang.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeClassIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeClassCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsFieldParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Instance:
		//	'instance' name=ID ':' type=[mmLang::Class] '{'
		//	fields+=Field*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'instance' name=ID ':' type=[mmLang::Class] '{' fields+=Field* '}'
		public Group getGroup() { return cGroup; }
		
		//'instance'
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[mmLang::Class]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[mmLang::Class]
		public CrossReference getTypeClassCrossReference_3_0() { return cTypeClassCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeClassIDTerminalRuleCall_3_0_1() { return cTypeClassIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_0() { return cFieldsFieldParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MLang.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cKeyFieldCrossReference_0_0 = (CrossReference)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cKeyFieldIDTerminalRuleCall_0_0_1 = (RuleCall)cKeyFieldCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	key=[mmLang::Field] '=' value=Value // TODO add static validation of value representation according to their type;
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=[mmLang::Field] '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//key=[mmLang::Field]
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//[mmLang::Field]
		public CrossReference getKeyFieldCrossReference_0_0() { return cKeyFieldCrossReference_0_0; }
		
		//ID
		public RuleCall getKeyFieldIDTerminalRuleCall_0_0_1() { return cKeyFieldIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.MLang.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFreeValAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValANY_OTHERTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringValAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntValAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInstanceValAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefInstanceCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefInstanceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefInstanceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cListValAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_4_2_0 = (RuleCall)cValsAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSetValAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValsValueParserRuleCall_5_2_0 = (RuleCall)cValsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Value:
		//	{FreeVal} val=ANY_OTHER | {StringVal} val=STRING | {IntVal} val=INT | {InstanceVal} ref=[Instance] | {ListVal} '['
		//	vals+=Value* ']' | {SetVal} '{' vals+=Value* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FreeVal} val=ANY_OTHER | {StringVal} val=STRING | {IntVal} val=INT | {InstanceVal} ref=[Instance] | {ListVal} '['
		//vals+=Value* ']' | {SetVal} '{' vals+=Value* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FreeVal} val=ANY_OTHER
		public Group getGroup_0() { return cGroup_0; }
		
		//{FreeVal}
		public Action getFreeValAction_0_0() { return cFreeValAction_0_0; }
		
		//val=ANY_OTHER
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }
		
		//ANY_OTHER
		public RuleCall getValANY_OTHERTerminalRuleCall_0_1_0() { return cValANY_OTHERTerminalRuleCall_0_1_0; }
		
		//{StringVal} val=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringVal}
		public Action getStringValAction_1_0() { return cStringValAction_1_0; }
		
		//val=STRING
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_1_1_0() { return cValSTRINGTerminalRuleCall_1_1_0; }
		
		//{IntVal} val=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntVal}
		public Action getIntValAction_2_0() { return cIntValAction_2_0; }
		
		//val=INT
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_2_1_0() { return cValINTTerminalRuleCall_2_1_0; }
		
		//{InstanceVal} ref=[Instance]
		public Group getGroup_3() { return cGroup_3; }
		
		//{InstanceVal}
		public Action getInstanceValAction_3_0() { return cInstanceValAction_3_0; }
		
		//ref=[Instance]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[Instance]
		public CrossReference getRefInstanceCrossReference_3_1_0() { return cRefInstanceCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefInstanceIDTerminalRuleCall_3_1_0_1() { return cRefInstanceIDTerminalRuleCall_3_1_0_1; }
		
		//{ListVal} '[' vals+=Value* ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{ListVal}
		public Action getListValAction_4_0() { return cListValAction_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//vals+=Value*
		public Assignment getValsAssignment_4_2() { return cValsAssignment_4_2; }
		
		//Value
		public RuleCall getValsValueParserRuleCall_4_2_0() { return cValsValueParserRuleCall_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//{SetVal} '{' vals+=Value* '}'
		public Group getGroup_5() { return cGroup_5; }
		
		//{SetVal}
		public Action getSetValAction_5_0() { return cSetValAction_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//vals+=Value*
		public Assignment getValsAssignment_5_2() { return cValsAssignment_5_2; }
		
		//Value
		public RuleCall getValsValueParserRuleCall_5_2_0() { return cValsValueParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	
	
	private final ModelElements pModel;
	private final InstanceElements pInstance;
	private final FieldElements pField;
	private final ValueElements pValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInstance = new InstanceElements();
		this.pField = new FieldElements();
		this.pValue = new ValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.MLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'model' name=ID 'metamodel' metamodel=[mmLang::Metamodel] instances+=Instance*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Instance:
	//	'instance' name=ID ':' type=[mmLang::Class] '{'
	//	fields+=Field*
	//	'}';
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//Field:
	//	key=[mmLang::Field] '=' value=Value // TODO add static validation of value representation according to their type;
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Value:
	//	{FreeVal} val=ANY_OTHER | {StringVal} val=STRING | {IntVal} val=INT | {InstanceVal} ref=[Instance] | {ListVal} '['
	//	vals+=Value* ']' | {SetVal} '{' vals+=Value* '}';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
