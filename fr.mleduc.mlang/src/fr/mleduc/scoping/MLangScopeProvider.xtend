/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.scoping

import fr.mleduc.mLang.Instance
import fr.mleduc.mLang.MLangPackage
import fr.mleduc.mLang.Model
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.MapBasedScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MLangScopeProvider extends AbstractMLangScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		if (reference == MLangPackage::eINSTANCE.instance_Type) {
			val types = (EcoreUtil2::getRootContainer(context) as Model).metamodel.classes.map [
				EObjectDescription::create(it.name, it)
			]
			MapBasedScope::createScope(super.getScope(context, reference), types)
		} else if (reference == MLangPackage::eINSTANCE.field_Key) {

			val fields = (context.eContainer as Instance).type.fields.map [
				EObjectDescription::create(it.name, it)
			]
			MapBasedScope::createScope(super.getScope(context, reference), fields)
		} else {
			super.getScope(context, reference)
		}
	}
}
