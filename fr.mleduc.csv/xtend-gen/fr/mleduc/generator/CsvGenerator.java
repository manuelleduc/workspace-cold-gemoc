/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.generator;

import com.google.common.collect.Iterators;
import fr.mleduc.csv.Cell;
import fr.mleduc.csv.Line;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CsvGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    final Iterator<Line> lines = Iterators.<Line>filter(_allContents, Line.class);
    final Iterator<Line> content = IteratorExtensions.<Line>tail(lines);
    final Procedure1<Line> _function = (Line it) -> {
      EList<Cell> _cells = it.getCells();
      final Function1<Cell, String> _function_1 = (Cell it_1) -> {
        return it_1.getContent();
      };
      final List<String> cells = ListExtensions.<Cell, String>map(_cells, _function_1);
      final String title = cells.get(0);
      final String links = cells.get(2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(title, "");
      _builder.append(".md");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("# ");
      _builder_1.append(title, "");
      _builder_1.newLineIfNotEmpty();
      _builder_1.newLine();
      _builder_1.append("## Links");
      _builder_1.newLine();
      _builder_1.append(links, "");
      _builder_1.newLineIfNotEmpty();
      fsa.generateFile(_builder.toString(), _builder_1);
    };
    IteratorExtensions.<Line>forEach(content, _function);
  }
}
