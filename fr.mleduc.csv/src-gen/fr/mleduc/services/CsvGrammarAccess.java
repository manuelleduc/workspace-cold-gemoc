/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CsvGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.Csv.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLinesLineParserRuleCall_0_0 = (RuleCall)cLinesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_1_1_0 = (RuleCall)cLinesAssignment_1_1.eContents().get(0);
		
		//Model:
		//	(lines+=Line (NL lines+=Line)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(lines+=Line (NL lines+=Line)*)?
		public Group getGroup() { return cGroup; }
		
		//lines+=Line
		public Assignment getLinesAssignment_0() { return cLinesAssignment_0; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_0_0() { return cLinesLineParserRuleCall_0_0; }
		
		//(NL lines+=Line)*
		public Group getGroup_1() { return cGroup_1; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_1_0() { return cNLTerminalRuleCall_1_0; }
		
		//lines+=Line
		public Assignment getLinesAssignment_1_1() { return cLinesAssignment_1_1; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_1_1_0() { return cLinesLineParserRuleCall_1_1_0; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.Csv.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellsCellParserRuleCall_0_0 = (RuleCall)cCellsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCellsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCellsCellParserRuleCall_1_1_0 = (RuleCall)cCellsAssignment_1_1.eContents().get(0);
		
		//Line:
		//	cells+=Cell (',' cells+=Cell?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//cells+=Cell (',' cells+=Cell?)*
		public Group getGroup() { return cGroup; }
		
		//cells+=Cell
		public Assignment getCellsAssignment_0() { return cCellsAssignment_0; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_0_0() { return cCellsCellParserRuleCall_0_0; }
		
		//(',' cells+=Cell?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//cells+=Cell?
		public Assignment getCellsAssignment_1_1() { return cCellsAssignment_1_1; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_1_1_0() { return cCellsCellParserRuleCall_1_1_0; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.Csv.Cell");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringCellAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cContentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cContentAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFreeCellAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cContentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContentFREE_CELLTerminalRuleCall_1_1_0 = (RuleCall)cContentAssignment_1_1.eContents().get(0);
		
		//Cell:
		//	{StringCell} content=STRING | {FreeCell} content=FREE_CELL;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringCell} content=STRING | {FreeCell} content=FREE_CELL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringCell} content=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringCell}
		public Action getStringCellAction_0_0() { return cStringCellAction_0_0; }
		
		//content=STRING
		public Assignment getContentAssignment_0_1() { return cContentAssignment_0_1; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_0_1_0() { return cContentSTRINGTerminalRuleCall_0_1_0; }
		
		//{FreeCell} content=FREE_CELL
		public Group getGroup_1() { return cGroup_1; }
		
		//{FreeCell}
		public Action getFreeCellAction_1_0() { return cFreeCellAction_1_0; }
		
		//content=FREE_CELL
		public Assignment getContentAssignment_1_1() { return cContentAssignment_1_1; }
		
		//FREE_CELL
		public RuleCall getContentFREE_CELLTerminalRuleCall_1_1_0() { return cContentFREE_CELLTerminalRuleCall_1_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final LineElements pLine;
	private final CellElements pCell;
	private final TerminalRule tNL;
	private final TerminalRule tFREE_CELL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CsvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pLine = new LineElements();
		this.pCell = new CellElements();
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.Csv.NL");
		this.tFREE_CELL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.Csv.FREE_CELL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.Csv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(lines+=Line (NL lines+=Line)*)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Line:
	//	cells+=Cell (',' cells+=Cell?)*;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Cell:
	//	{StringCell} content=STRING | {FreeCell} content=FREE_CELL;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//terminal NL:
	//	'\r' | '\n'+;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal FREE_CELL:
	//	!('\r' | '\n' | ',')*;
	public TerminalRule getFREE_CELLRule() {
		return tFREE_CELL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
