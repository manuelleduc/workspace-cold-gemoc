/*
 * generated by Xtext 2.10.0
 */
grammar InternalCsv;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.mleduc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.mleduc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.mleduc.services.CsvGrammarAccess;

}

@parser::members {

 	private CsvGrammarAccess grammarAccess;

    public InternalCsvParser(TokenStream input, CsvGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CsvGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getLinesLineParserRuleCall_0_0());
				}
				lv_lines_0_0=ruleLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"lines",
						lv_lines_0_0,
						"fr.mleduc.Csv.Line");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_NL_1=RULE_NL
			{
				newLeafNode(this_NL_1, grammarAccess.getModelAccess().getNLTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getLinesLineParserRuleCall_1_1_0());
					}
					lv_lines_2_0=ruleLine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"lines",
							lv_lines_2_0,
							"fr.mleduc.Csv.Line");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)?
;

// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineRule()); }
	iv_ruleLine=ruleLine
	{ $current=$iv_ruleLine.current; }
	EOF;

// Rule Line
ruleLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLineAccess().getCellsCellParserRuleCall_0_0());
				}
				lv_cells_0_0=ruleCell
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLineRule());
					}
					add(
						$current,
						"cells",
						lv_cells_0_0,
						"fr.mleduc.Csv.Cell");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLineAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLineAccess().getCellsCellParserRuleCall_1_1_0());
					}
					lv_cells_2_0=ruleCell
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLineRule());
						}
						add(
							$current,
							"cells",
							lv_cells_2_0,
							"fr.mleduc.Csv.Cell");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)*
	)
;

// Entry rule entryRuleCell
entryRuleCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCellRule()); }
	iv_ruleCell=ruleCell
	{ $current=$iv_ruleCell.current; }
	EOF;

// Rule Cell
ruleCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCellAccess().getStringCellAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_content_1_0=RULE_STRING
					{
						newLeafNode(lv_content_1_0, grammarAccess.getCellAccess().getContentSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCellRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCellAccess().getFreeCellAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_content_3_0=RULE_FREE_CELL
					{
						newLeafNode(lv_content_3_0, grammarAccess.getCellAccess().getContentFREE_CELLTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCellRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_3_0,
							"fr.mleduc.Csv.FREE_CELL");
					}
				)
			)
		)
	)
;

RULE_NL : ('\r'|'\n')+;

RULE_FREE_CELL : ~(('\r'|'\n'|','))*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
