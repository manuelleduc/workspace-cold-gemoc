/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.serializer;

import com.google.inject.Inject;
import fr.mleduc.csv.CsvPackage;
import fr.mleduc.csv.FreeCell;
import fr.mleduc.csv.Line;
import fr.mleduc.csv.Model;
import fr.mleduc.csv.StringCell;
import fr.mleduc.services.CsvGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CsvSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CsvGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CsvPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CsvPackage.FREE_CELL:
				sequence_Cell(context, (FreeCell) semanticObject); 
				return; 
			case CsvPackage.LINE:
				sequence_Line(context, (Line) semanticObject); 
				return; 
			case CsvPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case CsvPackage.STRING_CELL:
				sequence_Cell(context, (StringCell) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cell returns FreeCell
	 *
	 * Constraint:
	 *     content=FREE_CELL
	 */
	protected void sequence_Cell(ISerializationContext context, FreeCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CsvPackage.Literals.CELL__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CsvPackage.Literals.CELL__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellAccess().getContentFREE_CELLTerminalRuleCall_1_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cell returns StringCell
	 *
	 * Constraint:
	 *     content=STRING
	 */
	protected void sequence_Cell(ISerializationContext context, StringCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CsvPackage.Literals.CELL__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CsvPackage.Literals.CELL__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellAccess().getContentSTRINGTerminalRuleCall_0_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Line returns Line
	 *
	 * Constraint:
	 *     (cells+=Cell cells+=Cell*)
	 */
	protected void sequence_Line(ISerializationContext context, Line semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (lines+=Line lines+=Line*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
