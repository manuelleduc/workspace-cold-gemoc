/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.tests

import com.google.inject.Inject
import fr.mleduc.generator.PrettyPrint
import fr.mleduc.mMLang.Metamodel
import javax.inject.Provider
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(MMLangInjectorProvider)
class MMLangParsingTest {

	@Inject ParseHelper<Metamodel> parseHelper
	@Inject Provider<ResourceSet> resourceSetProvider
	@Inject extension ValidationTestHelper

	@Inject extension PrettyPrint
//	@Inject extension Compose

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			package test
			
			class String {}
			class Long {}
			
			class Person {
				name: String [1..1]
				age: Long [1..1]
			}
			
			class List<A> {}
			
			
			class Group {
				members: Person [0..*]
			}
		''')
		Assert.assertNotNull(result)
	}

//	@Test def void merge1() {
//		val rs = resourceSetProvider.get
//		val p1 = parseHelper.parse('''
//			package a
//			
//			class A {}
//		''', rs)
//
//		val p2 = parseHelper.parse('''
//			package b
//			
//			merge a
//			
//			class String {}
//			
//			class A {
//				name: String [1..1]
//			}
//			
//			class B {}
//		''', rs)
//
//		p1.assertNoErrors
//		p2.assertNoErrors
//
//		Assert.assertEquals('''
//			package a
//			
//			class A {
//			}
//		'''.toString, p1.reduce.print.toString)
//		Assert.assertEquals('''
//			package b
//			
//			class A {
//			  name: String [1..1]
//			}
//			
//			class B {
//			}
//			
//			class String {
//			}
//		'''.toString, p2.reduce.print.toString)
//
//	}
//
//	@Test def void merge2() {
//		val rs = resourceSetProvider.get
//		val p1 = parseHelper.parse('''
//			package a
//			
//			class Long {}
//			
//			class A {
//				u: Long [1..1]
//			}
//		''', rs)
//
//		val p2 = parseHelper.parse('''
//			package b
//			
//			merge a renaming A => X
//			
//			class String {}
//			
//			class X {
//				name: String [1..1]
//			}
//			
//			class B {
//				z: X [1..1]
//			}
//		''', rs)
//
//		p1.assertNoErrors
//		p2.assertNoErrors
//
//		Assert.assertEquals('''
//			package a
//			
//			class A {
//			  u: Long [1..1]
//			}
//			
//			class Long {
//			}
//		'''.toString, p1.reduce.print.toString)
//		Assert.assertEquals('''
//			package b
//			
//			class B {
//			  z: X [1..1]
//			}
//			
//			class Long {
//			}
//			
//			class String {
//			}
//			
//			class X {
//			  name: String [1..1]
//			  u: Long [1..1]
//			}
//		'''.toString, p2.reduce.print.toString)
//	}
//	
//	@Test def void merge3() {
//		val rs = resourceSetProvider.get
//		val p1 = parseHelper.parse('''
//			package a
//			
//			class A {}
//		''', rs)
//
//		val p2 = parseHelper.parse('''
//			package b
//			
//			merge a
//			
//			class B {
//				a: A [1..1]
//			}
//		''', rs)
//
//		p1.assertNoErrors
//		p2.assertNoErrors
//
//		Assert.assertEquals('''
//			package a
//			
//			class A {
//			}
//		'''.toString, p1.reduce.print.toString)
//		Assert.assertEquals('''
//			package b
//			
//			class A {
//			}
//			
//			class B {
//			  a: A [1..1]
//			}
//		'''.toString, p2.reduce.print.toString)
//	}
//
//	@Test def void slice1() {
//		val rs = resourceSetProvider.get
//		parseHelper.parse('''
//			package a
//			
//			class Long {}
//			
//			class Test {}
//			
//			class A {
//				u: Long [1..1]
//			}
//		''', rs)
//
//		val p2 = parseHelper.parse('''
//			package b
//			
//			slice a on A
//			
//			class B {
//				z: A [1..1]
//			}
//		''', rs)
//
//		p2.assertNoErrors
//
//		Assert.assertEquals('''
//			package b
//			
//			class A {
//			  u: Long [1..1]
//			}
//			
//			class B {
//			  z: A [1..1]
//			}
//			
//			class Long {
//			}
//		'''.toString, p2.reduce.print.toString)
//	}

}
