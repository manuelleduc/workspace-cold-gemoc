/*
 * generated by Xtext 2.10.0
 */
grammar InternalMMCLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.mleduc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.mleduc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.mleduc.services.MMCLangGrammarAccess;

}
@parser::members {
	private MMCLangGrammarAccess grammarAccess;

	public void setGrammarAccess(MMCLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleComposition
entryRuleComposition
:
{ before(grammarAccess.getCompositionRule()); }
	 ruleComposition
{ after(grammarAccess.getCompositionRule()); } 
	 EOF 
;

// Rule Composition
ruleComposition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositionAccess().getGroup()); }
		(rule__Composition__Group__0)
		{ after(grammarAccess.getCompositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePair
entryRulePair
:
{ before(grammarAccess.getPairRule()); }
	 rulePair
{ after(grammarAccess.getPairRule()); } 
	 EOF 
;

// Rule Pair
rulePair 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPairAccess().getGroup()); }
		(rule__Pair__Group__0)
		{ after(grammarAccess.getPairAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getGroup_0()); }
		(rule__Operation__Group_0__0)
		{ after(grammarAccess.getOperationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getGroup_1()); }
		(rule__Operation__Group_1__0)
		{ after(grammarAccess.getOperationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__0__Impl
	rule__Composition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getCompositionAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__1__Impl
	rule__Composition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getNameAssignment_1()); }
	(rule__Composition__NameAssignment_1)
	{ after(grammarAccess.getCompositionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getOperationsAssignment_2()); }
	(rule__Composition__OperationsAssignment_2)*
	{ after(grammarAccess.getCompositionAccess().getOperationsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__0__Impl
	rule__Operation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getMergeAction_0_0()); }
	()
	{ after(grammarAccess.getOperationAccess().getMergeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__1__Impl
	rule__Operation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getMergeKeyword_0_1()); }
	'merge'
	{ after(grammarAccess.getOperationAccess().getMergeKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__2__Impl
	rule__Operation__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getMetamodelAssignment_0_2()); }
	(rule__Operation__MetamodelAssignment_0_2)
	{ after(grammarAccess.getOperationAccess().getMetamodelAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_0_3()); }
	(rule__Operation__Group_0_3__0)?
	{ after(grammarAccess.getOperationAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0_3__0__Impl
	rule__Operation__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getRenamingKeyword_0_3_0()); }
	'renaming'
	{ after(grammarAccess.getOperationAccess().getRenamingKeyword_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getPairsAssignment_0_3_1()); }
	(rule__Operation__PairsAssignment_0_3_1)
	{ after(grammarAccess.getOperationAccess().getPairsAssignment_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__0__Impl
	rule__Operation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getSliceAction_1_0()); }
	()
	{ after(grammarAccess.getOperationAccess().getSliceAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__1__Impl
	rule__Operation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getSliceKeyword_1_1()); }
	'slice'
	{ after(grammarAccess.getOperationAccess().getSliceKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__2__Impl
	rule__Operation__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getMetamodelAssignment_1_2()); }
	(rule__Operation__MetamodelAssignment_1_2)
	{ after(grammarAccess.getOperationAccess().getMetamodelAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__3__Impl
	rule__Operation__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOnKeyword_1_3()); }
	'on'
	{ after(grammarAccess.getOperationAccess().getOnKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getTargetsAssignment_1_4()); }
	(rule__Operation__TargetsAssignment_1_4)*
	{ after(grammarAccess.getOperationAccess().getTargetsAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pair__Group__0__Impl
	rule__Pair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPairAccess().getFromAssignment_0()); }
	(rule__Pair__FromAssignment_0)
	{ after(grammarAccess.getPairAccess().getFromAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pair__Group__1__Impl
	rule__Pair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPairAccess().getEqualsSignGreaterThanSignKeyword_1()); }
	'=>'
	{ after(grammarAccess.getPairAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPairAccess().getNameAssignment_2()); }
	(rule__Pair__NameAssignment_2)
	{ after(grammarAccess.getPairAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__OperationsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getOperationsOperationParserRuleCall_2_0()); }
		ruleOperation
		{ after(grammarAccess.getCompositionAccess().getOperationsOperationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__MetamodelAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getMetamodelMetamodelCrossReference_0_2_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getMetamodelMetamodelIDTerminalRuleCall_0_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOperationAccess().getMetamodelMetamodelIDTerminalRuleCall_0_2_0_1()); }
		)
		{ after(grammarAccess.getOperationAccess().getMetamodelMetamodelCrossReference_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__PairsAssignment_0_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getPairsPairParserRuleCall_0_3_1_0()); }
		rulePair
		{ after(grammarAccess.getOperationAccess().getPairsPairParserRuleCall_0_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__MetamodelAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getMetamodelMetamodelCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getMetamodelMetamodelIDTerminalRuleCall_1_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOperationAccess().getMetamodelMetamodelIDTerminalRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getOperationAccess().getMetamodelMetamodelCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__TargetsAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getTargetsClassCrossReference_1_4_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getTargetsClassIDTerminalRuleCall_1_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOperationAccess().getTargetsClassIDTerminalRuleCall_1_4_0_1()); }
		)
		{ after(grammarAccess.getOperationAccess().getTargetsClassCrossReference_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__FromAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPairAccess().getFromClassCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPairAccess().getFromClassIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPairAccess().getFromClassIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPairAccess().getFromClassCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPairAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPairAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
