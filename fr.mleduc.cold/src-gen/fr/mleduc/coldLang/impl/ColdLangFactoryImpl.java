/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.coldLang.impl;

import fr.mleduc.coldLang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ColdLangFactoryImpl extends EFactoryImpl implements ColdLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ColdLangFactory init()
  {
    try
    {
      ColdLangFactory theColdLangFactory = (ColdLangFactory)EPackage.Registry.INSTANCE.getEFactory(ColdLangPackage.eNS_URI);
      if (theColdLangFactory != null)
      {
        return theColdLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ColdLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColdLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ColdLangPackage.MODEL: return createModel();
      case ColdLangPackage.CONCERN: return createConcern();
      case ColdLangPackage.FEATURE_MODEL: return createFeatureModel();
      case ColdLangPackage.LANGUAGE: return createLanguage();
      case ColdLangPackage.LANGUAGE_OPERATOR: return createLanguageOperator();
      case ColdLangPackage.PERSPECTIVE: return createPerspective();
      case ColdLangPackage.PERSPECTIVE_LANGUAGE: return createPerspectiveLanguage();
      case ColdLangPackage.FACET: return createFacet();
      case ColdLangPackage.FACET_COMPOSITION: return createFacetComposition();
      case ColdLangPackage.APPLICATION: return createApplication();
      case ColdLangPackage.ARTIFACT: return createArtifact();
      case ColdLangPackage.CONDITION: return createCondition();
      case ColdLangPackage.ONE_OF: return createOneOf();
      case ColdLangPackage.SOME_OF: return createSomeOf();
      case ColdLangPackage.FEATURE: return createFeature();
      case ColdLangPackage.ARTIFACT_REF: return createArtifactRef();
      case ColdLangPackage.EQUIV: return createEquiv();
      case ColdLangPackage.IMPLY: return createImply();
      case ColdLangPackage.OR: return createOr();
      case ColdLangPackage.AND: return createAnd();
      case ColdLangPackage.NOT: return createNot();
      case ColdLangPackage.VARIABLE: return createVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concern createConcern()
  {
    ConcernImpl concern = new ConcernImpl();
    return concern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureModel createFeatureModel()
  {
    FeatureModelImpl featureModel = new FeatureModelImpl();
    return featureModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Language createLanguage()
  {
    LanguageImpl language = new LanguageImpl();
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageOperator createLanguageOperator()
  {
    LanguageOperatorImpl languageOperator = new LanguageOperatorImpl();
    return languageOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Perspective createPerspective()
  {
    PerspectiveImpl perspective = new PerspectiveImpl();
    return perspective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveLanguage createPerspectiveLanguage()
  {
    PerspectiveLanguageImpl perspectiveLanguage = new PerspectiveLanguageImpl();
    return perspectiveLanguage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Facet createFacet()
  {
    FacetImpl facet = new FacetImpl();
    return facet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FacetComposition createFacetComposition()
  {
    FacetCompositionImpl facetComposition = new FacetCompositionImpl();
    return facetComposition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Application createApplication()
  {
    ApplicationImpl application = new ApplicationImpl();
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact createArtifact()
  {
    ArtifactImpl artifact = new ArtifactImpl();
    return artifact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OneOf createOneOf()
  {
    OneOfImpl oneOf = new OneOfImpl();
    return oneOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SomeOf createSomeOf()
  {
    SomeOfImpl someOf = new SomeOfImpl();
    return someOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArtifactRef createArtifactRef()
  {
    ArtifactRefImpl artifactRef = new ArtifactRefImpl();
    return artifactRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equiv createEquiv()
  {
    EquivImpl equiv = new EquivImpl();
    return equiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Imply createImply()
  {
    ImplyImpl imply = new ImplyImpl();
    return imply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColdLangPackage getColdLangPackage()
  {
    return (ColdLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ColdLangPackage getPackage()
  {
    return ColdLangPackage.eINSTANCE;
  }

} //ColdLangFactoryImpl
