/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.coldLang.impl;

import fr.mleduc.coldLang.ColdLangPackage;
import fr.mleduc.coldLang.Language;
import fr.mleduc.coldLang.LanguageOperator;
import fr.mleduc.coldLang.PerspectiveLanguage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Perspective Language</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.mleduc.coldLang.impl.PerspectiveLanguageImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.mleduc.coldLang.impl.PerspectiveLanguageImpl#getLanguage <em>Language</em>}</li>
 *   <li>{@link fr.mleduc.coldLang.impl.PerspectiveLanguageImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link fr.mleduc.coldLang.impl.PerspectiveLanguageImpl#getPerspective <em>Perspective</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PerspectiveLanguageImpl extends MinimalEObjectImpl.Container implements PerspectiveLanguage
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLanguage() <em>Language</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguage()
   * @generated
   * @ordered
   */
  protected Language language;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected LanguageOperator operator;

  /**
   * The cached value of the '{@link #getPerspective() <em>Perspective</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPerspective()
   * @generated
   * @ordered
   */
  protected PerspectiveLanguage perspective;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PerspectiveLanguageImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ColdLangPackage.Literals.PERSPECTIVE_LANGUAGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ColdLangPackage.PERSPECTIVE_LANGUAGE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Language getLanguage()
  {
    if (language != null && language.eIsProxy())
    {
      InternalEObject oldLanguage = (InternalEObject)language;
      language = (Language)eResolveProxy(oldLanguage);
      if (language != oldLanguage)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ColdLangPackage.PERSPECTIVE_LANGUAGE__LANGUAGE, oldLanguage, language));
      }
    }
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Language basicGetLanguage()
  {
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLanguage(Language newLanguage)
  {
    Language oldLanguage = language;
    language = newLanguage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ColdLangPackage.PERSPECTIVE_LANGUAGE__LANGUAGE, oldLanguage, language));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageOperator getOperator()
  {
    if (operator != null && operator.eIsProxy())
    {
      InternalEObject oldOperator = (InternalEObject)operator;
      operator = (LanguageOperator)eResolveProxy(oldOperator);
      if (operator != oldOperator)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ColdLangPackage.PERSPECTIVE_LANGUAGE__OPERATOR, oldOperator, operator));
      }
    }
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageOperator basicGetOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(LanguageOperator newOperator)
  {
    LanguageOperator oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ColdLangPackage.PERSPECTIVE_LANGUAGE__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveLanguage getPerspective()
  {
    if (perspective != null && perspective.eIsProxy())
    {
      InternalEObject oldPerspective = (InternalEObject)perspective;
      perspective = (PerspectiveLanguage)eResolveProxy(oldPerspective);
      if (perspective != oldPerspective)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ColdLangPackage.PERSPECTIVE_LANGUAGE__PERSPECTIVE, oldPerspective, perspective));
      }
    }
    return perspective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveLanguage basicGetPerspective()
  {
    return perspective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPerspective(PerspectiveLanguage newPerspective)
  {
    PerspectiveLanguage oldPerspective = perspective;
    perspective = newPerspective;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ColdLangPackage.PERSPECTIVE_LANGUAGE__PERSPECTIVE, oldPerspective, perspective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__NAME:
        return getName();
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__LANGUAGE:
        if (resolve) return getLanguage();
        return basicGetLanguage();
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__OPERATOR:
        if (resolve) return getOperator();
        return basicGetOperator();
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__PERSPECTIVE:
        if (resolve) return getPerspective();
        return basicGetPerspective();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__NAME:
        setName((String)newValue);
        return;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__LANGUAGE:
        setLanguage((Language)newValue);
        return;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__OPERATOR:
        setOperator((LanguageOperator)newValue);
        return;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__PERSPECTIVE:
        setPerspective((PerspectiveLanguage)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__LANGUAGE:
        setLanguage((Language)null);
        return;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__OPERATOR:
        setOperator((LanguageOperator)null);
        return;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__PERSPECTIVE:
        setPerspective((PerspectiveLanguage)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__LANGUAGE:
        return language != null;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__OPERATOR:
        return operator != null;
      case ColdLangPackage.PERSPECTIVE_LANGUAGE__PERSPECTIVE:
        return perspective != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PerspectiveLanguageImpl
