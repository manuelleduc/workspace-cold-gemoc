/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.coldLang.impl;

import fr.mleduc.coldLang.Application;
import fr.mleduc.coldLang.ColdLangPackage;
import fr.mleduc.coldLang.FacetComposition;
import fr.mleduc.coldLang.PerspectiveLanguage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Facet Composition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.mleduc.coldLang.impl.FacetCompositionImpl#getPerspectiveLanguage <em>Perspective Language</em>}</li>
 *   <li>{@link fr.mleduc.coldLang.impl.FacetCompositionImpl#getApplication <em>Application</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FacetCompositionImpl extends MinimalEObjectImpl.Container implements FacetComposition
{
  /**
   * The cached value of the '{@link #getPerspectiveLanguage() <em>Perspective Language</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPerspectiveLanguage()
   * @generated
   * @ordered
   */
  protected PerspectiveLanguage perspectiveLanguage;

  /**
   * The cached value of the '{@link #getApplication() <em>Application</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApplication()
   * @generated
   * @ordered
   */
  protected Application application;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FacetCompositionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ColdLangPackage.Literals.FACET_COMPOSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveLanguage getPerspectiveLanguage()
  {
    if (perspectiveLanguage != null && perspectiveLanguage.eIsProxy())
    {
      InternalEObject oldPerspectiveLanguage = (InternalEObject)perspectiveLanguage;
      perspectiveLanguage = (PerspectiveLanguage)eResolveProxy(oldPerspectiveLanguage);
      if (perspectiveLanguage != oldPerspectiveLanguage)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ColdLangPackage.FACET_COMPOSITION__PERSPECTIVE_LANGUAGE, oldPerspectiveLanguage, perspectiveLanguage));
      }
    }
    return perspectiveLanguage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerspectiveLanguage basicGetPerspectiveLanguage()
  {
    return perspectiveLanguage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPerspectiveLanguage(PerspectiveLanguage newPerspectiveLanguage)
  {
    PerspectiveLanguage oldPerspectiveLanguage = perspectiveLanguage;
    perspectiveLanguage = newPerspectiveLanguage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ColdLangPackage.FACET_COMPOSITION__PERSPECTIVE_LANGUAGE, oldPerspectiveLanguage, perspectiveLanguage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Application getApplication()
  {
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetApplication(Application newApplication, NotificationChain msgs)
  {
    Application oldApplication = application;
    application = newApplication;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ColdLangPackage.FACET_COMPOSITION__APPLICATION, oldApplication, newApplication);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setApplication(Application newApplication)
  {
    if (newApplication != application)
    {
      NotificationChain msgs = null;
      if (application != null)
        msgs = ((InternalEObject)application).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ColdLangPackage.FACET_COMPOSITION__APPLICATION, null, msgs);
      if (newApplication != null)
        msgs = ((InternalEObject)newApplication).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ColdLangPackage.FACET_COMPOSITION__APPLICATION, null, msgs);
      msgs = basicSetApplication(newApplication, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ColdLangPackage.FACET_COMPOSITION__APPLICATION, newApplication, newApplication));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ColdLangPackage.FACET_COMPOSITION__APPLICATION:
        return basicSetApplication(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ColdLangPackage.FACET_COMPOSITION__PERSPECTIVE_LANGUAGE:
        if (resolve) return getPerspectiveLanguage();
        return basicGetPerspectiveLanguage();
      case ColdLangPackage.FACET_COMPOSITION__APPLICATION:
        return getApplication();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ColdLangPackage.FACET_COMPOSITION__PERSPECTIVE_LANGUAGE:
        setPerspectiveLanguage((PerspectiveLanguage)newValue);
        return;
      case ColdLangPackage.FACET_COMPOSITION__APPLICATION:
        setApplication((Application)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ColdLangPackage.FACET_COMPOSITION__PERSPECTIVE_LANGUAGE:
        setPerspectiveLanguage((PerspectiveLanguage)null);
        return;
      case ColdLangPackage.FACET_COMPOSITION__APPLICATION:
        setApplication((Application)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ColdLangPackage.FACET_COMPOSITION__PERSPECTIVE_LANGUAGE:
        return perspectiveLanguage != null;
      case ColdLangPackage.FACET_COMPOSITION__APPLICATION:
        return application != null;
    }
    return super.eIsSet(featureID);
  }

} //FacetCompositionImpl
