/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ColdLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConcernsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConcernsConcernParserRuleCall_0_0 = (RuleCall)cConcernsAssignment_0.eContents().get(0);
		private final Assignment cLanguagesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLanguagesLanguageParserRuleCall_1_0 = (RuleCall)cLanguagesAssignment_1.eContents().get(0);
		private final Assignment cPerspectivesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPerspectivesPerspectiveParserRuleCall_2_0 = (RuleCall)cPerspectivesAssignment_2.eContents().get(0);
		
		//Model:
		//	(concerns+=Concern | languages+=Language | perspectives+=Perspective)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(concerns+=Concern | languages+=Language | perspectives+=Perspective)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//concerns+=Concern
		public Assignment getConcernsAssignment_0() { return cConcernsAssignment_0; }
		
		//Concern
		public RuleCall getConcernsConcernParserRuleCall_0_0() { return cConcernsConcernParserRuleCall_0_0; }
		
		//languages+=Language
		public Assignment getLanguagesAssignment_1() { return cLanguagesAssignment_1; }
		
		//Language
		public RuleCall getLanguagesLanguageParserRuleCall_1_0() { return cLanguagesLanguageParserRuleCall_1_0; }
		
		//perspectives+=Perspective
		public Assignment getPerspectivesAssignment_2() { return cPerspectivesAssignment_2; }
		
		//Perspective
		public RuleCall getPerspectivesPerspectiveParserRuleCall_2_0() { return cPerspectivesPerspectiveParserRuleCall_2_0; }
	}
	public class ConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Concern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcernKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cImportedPerspectiveCrossReference_3_1_0 = (CrossReference)cImportedAssignment_3_1.eContents().get(0);
		private final RuleCall cImportedPerspectiveIDTerminalRuleCall_3_1_0_1 = (RuleCall)cImportedPerspectiveCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFacetsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFacetsFacetParserRuleCall_4_0_0 = (RuleCall)cFacetsAssignment_4_0.eContents().get(0);
		private final Assignment cArtifactAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cArtifactArtifactParserRuleCall_4_1_0 = (RuleCall)cArtifactAssignment_4_1.eContents().get(0);
		private final Assignment cFmAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFmFeatureModelParserRuleCall_5_0 = (RuleCall)cFmAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Concern:
		//	'concern' name=ID '{' ('import' imported+=[Perspective])? (facets+=Facet | artifact+=Artifact)*
		//	fm=FeatureModel
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'concern' name=ID '{' ('import' imported+=[Perspective])? (facets+=Facet | artifact+=Artifact)* fm=FeatureModel '}'
		public Group getGroup() { return cGroup; }
		
		//'concern'
		public Keyword getConcernKeyword_0() { return cConcernKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('import' imported+=[Perspective])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'import'
		public Keyword getImportKeyword_3_0() { return cImportKeyword_3_0; }
		
		//imported+=[Perspective]
		public Assignment getImportedAssignment_3_1() { return cImportedAssignment_3_1; }
		
		//[Perspective]
		public CrossReference getImportedPerspectiveCrossReference_3_1_0() { return cImportedPerspectiveCrossReference_3_1_0; }
		
		//ID
		public RuleCall getImportedPerspectiveIDTerminalRuleCall_3_1_0_1() { return cImportedPerspectiveIDTerminalRuleCall_3_1_0_1; }
		
		//(facets+=Facet | artifact+=Artifact)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//facets+=Facet
		public Assignment getFacetsAssignment_4_0() { return cFacetsAssignment_4_0; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_4_0_0() { return cFacetsFacetParserRuleCall_4_0_0; }
		
		//artifact+=Artifact
		public Assignment getArtifactAssignment_4_1() { return cArtifactAssignment_4_1; }
		
		//Artifact
		public RuleCall getArtifactArtifactParserRuleCall_4_1_0() { return cArtifactArtifactParserRuleCall_4_1_0; }
		
		//fm=FeatureModel
		public Assignment getFmAssignment_5() { return cFmAssignment_5; }
		
		//FeatureModel
		public RuleCall getFmFeatureModelParserRuleCall_5_0() { return cFmFeatureModelParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FeatureModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.FeatureModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneOfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSomeOfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FeatureModel:
		//	OneOf | SomeOf | Feature;
		@Override public ParserRule getRule() { return rule; }
		
		//OneOf | SomeOf | Feature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneOf
		public RuleCall getOneOfParserRuleCall_0() { return cOneOfParserRuleCall_0; }
		
		//SomeOf
		public RuleCall getSomeOfParserRuleCall_1() { return cSomeOfParserRuleCall_1; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_2() { return cFeatureParserRuleCall_2; }
	}
	public class OneOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.OneOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOneOfAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cOneOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cChildrenFeatureModelParserRuleCall_5_1_0 = (RuleCall)cChildrenAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionConditionParserRuleCall_7_0 = (RuleCall)cConditionAssignment_7.eContents().get(0);
		
		//OneOf FeatureModel:
		//	{OneOf} optional?='?'? 'oneOf' name=ID '[' ("-" children+=FeatureModel)*
		//	']' condition=Condition?
		@Override public ParserRule getRule() { return rule; }
		
		//{OneOf} optional?='?'? 'oneOf' name=ID '[' ("-" children+=FeatureModel)* ']' condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//{OneOf}
		public Action getOneOfAction_0() { return cOneOfAction_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }
		
		//'oneOf'
		public Keyword getOneOfKeyword_2() { return cOneOfKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//("-" children+=FeatureModel)*
		public Group getGroup_5() { return cGroup_5; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_0() { return cHyphenMinusKeyword_5_0; }
		
		//children+=FeatureModel
		public Assignment getChildrenAssignment_5_1() { return cChildrenAssignment_5_1; }
		
		//FeatureModel
		public RuleCall getChildrenFeatureModelParserRuleCall_5_1_0() { return cChildrenFeatureModelParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_0() { return cConditionConditionParserRuleCall_7_0; }
	}
	public class SomeOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.SomeOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSomeOfAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cSomeOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cChildrenFeatureModelParserRuleCall_5_1_0 = (RuleCall)cChildrenAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionConditionParserRuleCall_7_0 = (RuleCall)cConditionAssignment_7.eContents().get(0);
		
		//SomeOf FeatureModel:
		//	{SomeOf} optional?='?'? 'someOf' name=ID '[' ("-" children+=FeatureModel)*
		//	']' condition=Condition?
		@Override public ParserRule getRule() { return rule; }
		
		//{SomeOf} optional?='?'? 'someOf' name=ID '[' ("-" children+=FeatureModel)* ']' condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//{SomeOf}
		public Action getSomeOfAction_0() { return cSomeOfAction_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }
		
		//'someOf'
		public Keyword getSomeOfKeyword_2() { return cSomeOfKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//("-" children+=FeatureModel)*
		public Group getGroup_5() { return cGroup_5; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_0() { return cHyphenMinusKeyword_5_0; }
		
		//children+=FeatureModel
		public Assignment getChildrenAssignment_5_1() { return cChildrenAssignment_5_1; }
		
		//FeatureModel
		public RuleCall getChildrenFeatureModelParserRuleCall_5_1_0() { return cChildrenFeatureModelParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_0() { return cConditionConditionParserRuleCall_7_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cFeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		
		//Feature FeatureModel:
		//	{Feature} optional?='?'? 'feature' name=ID condition=Condition?
		@Override public ParserRule getRule() { return rule; }
		
		//{Feature} optional?='?'? 'feature' name=ID condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//{Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }
		
		//optional?='?'?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }
		
		//'feature'
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }
	}
	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Language");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorsLanguageOperatorParserRuleCall_3_0 = (RuleCall)cOperatorsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Language:
		//	'language' name=ID '{'
		//	operators+=LanguageOperator*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'language' name=ID '{' operators+=LanguageOperator* '}'
		public Group getGroup() { return cGroup; }
		
		//'language'
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//operators+=LanguageOperator*
		public Assignment getOperatorsAssignment_3() { return cOperatorsAssignment_3; }
		
		//LanguageOperator
		public RuleCall getOperatorsLanguageOperatorParserRuleCall_3_0() { return cOperatorsLanguageOperatorParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LanguageOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.LanguageOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLanguageCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLanguageIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeLanguageCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypesLanguageCrossReference_3_1_0 = (CrossReference)cTypesAssignment_3_1.eContents().get(0);
		private final RuleCall cTypesLanguageIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTypesLanguageCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LanguageOperator:
		//	name=ID ':' type+=[Language] ('=>' types+=[Language])* '[' description=STRING ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type+=[Language] ('=>' types+=[Language])* '[' description=STRING ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type+=[Language]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Language]
		public CrossReference getTypeLanguageCrossReference_2_0() { return cTypeLanguageCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeLanguageIDTerminalRuleCall_2_0_1() { return cTypeLanguageIDTerminalRuleCall_2_0_1; }
		
		//('=>' types+=[Language])*
		public Group getGroup_3() { return cGroup_3; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3_0() { return cEqualsSignGreaterThanSignKeyword_3_0; }
		
		//types+=[Language]
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }
		
		//[Language]
		public CrossReference getTypesLanguageCrossReference_3_1_0() { return cTypesLanguageCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTypesLanguageIDTerminalRuleCall_3_1_0_1() { return cTypesLanguageIDTerminalRuleCall_3_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class PerspectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Perspective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerspectiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLanguagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLanguagesPerspectiveLanguageParserRuleCall_3_0 = (RuleCall)cLanguagesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Perspective:
		//	'perspective' name=ID '{'
		//	languages+=PerspectiveLanguage*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'perspective' name=ID '{' languages+=PerspectiveLanguage* '}'
		public Group getGroup() { return cGroup; }
		
		//'perspective'
		public Keyword getPerspectiveKeyword_0() { return cPerspectiveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//languages+=PerspectiveLanguage*
		public Assignment getLanguagesAssignment_3() { return cLanguagesAssignment_3; }
		
		//PerspectiveLanguage
		public RuleCall getLanguagesPerspectiveLanguageParserRuleCall_3_0() { return cLanguagesPerspectiveLanguageParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PerspectiveLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.PerspectiveLanguage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLanguageLanguageCrossReference_2_0 = (CrossReference)cLanguageAssignment_2.eContents().get(0);
		private final RuleCall cLanguageLanguageIDTerminalRuleCall_2_0_1 = (RuleCall)cLanguageLanguageCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cOperatorLanguageOperatorCrossReference_3_0_0 = (CrossReference)cOperatorAssignment_3_0.eContents().get(0);
		private final RuleCall cOperatorLanguageOperatorIDTerminalRuleCall_3_0_0_1 = (RuleCall)cOperatorLanguageOperatorCrossReference_3_0_0.eContents().get(1);
		private final Assignment cPerspectiveAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cPerspectivePerspectiveLanguageCrossReference_3_1_0 = (CrossReference)cPerspectiveAssignment_3_1.eContents().get(0);
		private final RuleCall cPerspectivePerspectiveLanguageIDSParserRuleCall_3_1_0_1 = (RuleCall)cPerspectivePerspectiveLanguageCrossReference_3_1_0.eContents().get(1);
		
		//PerspectiveLanguage:
		//	name=ID ':' language=[Language] (operator=[LanguageOperator] perspective=[PerspectiveLanguage|IDS])?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' language=[Language] (operator=[LanguageOperator] perspective=[PerspectiveLanguage|IDS])?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//language=[Language]
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//[Language]
		public CrossReference getLanguageLanguageCrossReference_2_0() { return cLanguageLanguageCrossReference_2_0; }
		
		//ID
		public RuleCall getLanguageLanguageIDTerminalRuleCall_2_0_1() { return cLanguageLanguageIDTerminalRuleCall_2_0_1; }
		
		//(operator=[LanguageOperator] perspective=[PerspectiveLanguage|IDS])?
		public Group getGroup_3() { return cGroup_3; }
		
		//operator=[LanguageOperator]
		public Assignment getOperatorAssignment_3_0() { return cOperatorAssignment_3_0; }
		
		//[LanguageOperator]
		public CrossReference getOperatorLanguageOperatorCrossReference_3_0_0() { return cOperatorLanguageOperatorCrossReference_3_0_0; }
		
		//ID
		public RuleCall getOperatorLanguageOperatorIDTerminalRuleCall_3_0_0_1() { return cOperatorLanguageOperatorIDTerminalRuleCall_3_0_0_1; }
		
		//perspective=[PerspectiveLanguage|IDS]
		public Assignment getPerspectiveAssignment_3_1() { return cPerspectiveAssignment_3_1; }
		
		//[PerspectiveLanguage|IDS]
		public CrossReference getPerspectivePerspectiveLanguageCrossReference_3_1_0() { return cPerspectivePerspectiveLanguageCrossReference_3_1_0; }
		
		//IDS
		public RuleCall getPerspectivePerspectiveLanguageIDSParserRuleCall_3_1_0_1() { return cPerspectivePerspectiveLanguageIDSParserRuleCall_3_1_0_1; }
	}
	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Facet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPerspectiveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPerspectivePerspectiveCrossReference_3_0 = (CrossReference)cPerspectiveAssignment_3.eContents().get(0);
		private final RuleCall cPerspectivePerspectiveIDTerminalRuleCall_3_0_1 = (RuleCall)cPerspectivePerspectiveCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cActivationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActivationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActivationConditionParserRuleCall_6_0 = (RuleCall)cActivationAssignment_6.eContents().get(0);
		private final Assignment cCompositionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompositionsFacetCompositionParserRuleCall_7_0 = (RuleCall)cCompositionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Facet:
		//	'facet' name=ID ':' perspective=[Perspective] '{'
		//	'activation' activation=Condition
		//	compositions+=FacetComposition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'facet' name=ID ':' perspective=[Perspective] '{' 'activation' activation=Condition compositions+=FacetComposition* '}'
		public Group getGroup() { return cGroup; }
		
		//'facet'
		public Keyword getFacetKeyword_0() { return cFacetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//perspective=[Perspective]
		public Assignment getPerspectiveAssignment_3() { return cPerspectiveAssignment_3; }
		
		//[Perspective]
		public CrossReference getPerspectivePerspectiveCrossReference_3_0() { return cPerspectivePerspectiveCrossReference_3_0; }
		
		//ID
		public RuleCall getPerspectivePerspectiveIDTerminalRuleCall_3_0_1() { return cPerspectivePerspectiveIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'activation'
		public Keyword getActivationKeyword_5() { return cActivationKeyword_5; }
		
		//activation=Condition
		public Assignment getActivationAssignment_6() { return cActivationAssignment_6; }
		
		//Condition
		public RuleCall getActivationConditionParserRuleCall_6_0() { return cActivationConditionParserRuleCall_6_0; }
		
		//compositions+=FacetComposition*
		public Assignment getCompositionsAssignment_7() { return cCompositionsAssignment_7; }
		
		//FacetComposition
		public RuleCall getCompositionsFacetCompositionParserRuleCall_7_0() { return cCompositionsFacetCompositionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FacetCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.FacetComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPerspectiveLanguageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPerspectiveLanguagePerspectiveLanguageCrossReference_0_0 = (CrossReference)cPerspectiveLanguageAssignment_0.eContents().get(0);
		private final RuleCall cPerspectiveLanguagePerspectiveLanguageIDTerminalRuleCall_0_0_1 = (RuleCall)cPerspectiveLanguagePerspectiveLanguageCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cApplicationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cApplicationApplicationParserRuleCall_2_0 = (RuleCall)cApplicationAssignment_2.eContents().get(0);
		
		//FacetComposition:
		//	perspectiveLanguage=[PerspectiveLanguage] ':' application=Application;
		@Override public ParserRule getRule() { return rule; }
		
		//perspectiveLanguage=[PerspectiveLanguage] ':' application=Application
		public Group getGroup() { return cGroup; }
		
		//perspectiveLanguage=[PerspectiveLanguage]
		public Assignment getPerspectiveLanguageAssignment_0() { return cPerspectiveLanguageAssignment_0; }
		
		//[PerspectiveLanguage]
		public CrossReference getPerspectiveLanguagePerspectiveLanguageCrossReference_0_0() { return cPerspectiveLanguagePerspectiveLanguageCrossReference_0_0; }
		
		//ID
		public RuleCall getPerspectiveLanguagePerspectiveLanguageIDTerminalRuleCall_0_0_1() { return cPerspectiveLanguagePerspectiveLanguageIDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//application=Application
		public Assignment getApplicationAssignment_2() { return cApplicationAssignment_2; }
		
		//Application
		public RuleCall getApplicationApplicationParserRuleCall_2_0() { return cApplicationApplicationParserRuleCall_2_0; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Application");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArtifactRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cArtifactAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cArtifactArtifactCrossReference_0_1_0 = (CrossReference)cArtifactAssignment_0_1.eContents().get(0);
		private final RuleCall cArtifactArtifactIDTerminalRuleCall_0_1_0_1 = (RuleCall)cArtifactArtifactCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cApplicationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLanguageOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLanguageOperatorLanguageOperatorCrossReference_1_1_0 = (CrossReference)cLanguageOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cLanguageOperatorLanguageOperatorIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLanguageOperatorLanguageOperatorCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cApplicationsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cApplicationsApplicationParserRuleCall_1_3_0 = (RuleCall)cApplicationsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cApplicationsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cApplicationsApplicationParserRuleCall_1_4_1_0 = (RuleCall)cApplicationsAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Application:
		//	{ArtifactRef} artifact=[Artifact] | {Application} languageOperator=[LanguageOperator] '(' applications+=Application
		//	(',' applications+=Application)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArtifactRef} artifact=[Artifact] | {Application} languageOperator=[LanguageOperator] '(' applications+=Application (','
		//applications+=Application)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ArtifactRef} artifact=[Artifact]
		public Group getGroup_0() { return cGroup_0; }
		
		//{ArtifactRef}
		public Action getArtifactRefAction_0_0() { return cArtifactRefAction_0_0; }
		
		//artifact=[Artifact]
		public Assignment getArtifactAssignment_0_1() { return cArtifactAssignment_0_1; }
		
		//[Artifact]
		public CrossReference getArtifactArtifactCrossReference_0_1_0() { return cArtifactArtifactCrossReference_0_1_0; }
		
		//ID
		public RuleCall getArtifactArtifactIDTerminalRuleCall_0_1_0_1() { return cArtifactArtifactIDTerminalRuleCall_0_1_0_1; }
		
		//{Application} languageOperator=[LanguageOperator] '(' applications+=Application (',' applications+=Application)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Application}
		public Action getApplicationAction_1_0() { return cApplicationAction_1_0; }
		
		//languageOperator=[LanguageOperator]
		public Assignment getLanguageOperatorAssignment_1_1() { return cLanguageOperatorAssignment_1_1; }
		
		//[LanguageOperator]
		public CrossReference getLanguageOperatorLanguageOperatorCrossReference_1_1_0() { return cLanguageOperatorLanguageOperatorCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLanguageOperatorLanguageOperatorIDTerminalRuleCall_1_1_0_1() { return cLanguageOperatorLanguageOperatorIDTerminalRuleCall_1_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//applications+=Application
		public Assignment getApplicationsAssignment_1_3() { return cApplicationsAssignment_1_3; }
		
		//Application
		public RuleCall getApplicationsApplicationParserRuleCall_1_3_0() { return cApplicationsApplicationParserRuleCall_1_3_0; }
		
		//(',' applications+=Application)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//applications+=Application
		public Assignment getApplicationsAssignment_1_4_1() { return cApplicationsAssignment_1_4_1; }
		
		//Application
		public RuleCall getApplicationsApplicationParserRuleCall_1_4_1_0() { return cApplicationsApplicationParserRuleCall_1_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Artifact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLanguageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLanguageLanguageCrossReference_3_0 = (CrossReference)cLanguageAssignment_3.eContents().get(0);
		private final RuleCall cLanguageLanguageIDTerminalRuleCall_3_0_1 = (RuleCall)cLanguageLanguageCrossReference_3_0.eContents().get(1);
		
		//Artifact:
		//	'artifact' name=ID ':' language=[Language];
		@Override public ParserRule getRule() { return rule; }
		
		//'artifact' name=ID ':' language=[Language]
		public Group getGroup() { return cGroup; }
		
		//'artifact'
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//language=[Language]
		public Assignment getLanguageAssignment_3() { return cLanguageAssignment_3; }
		
		//[Language]
		public CrossReference getLanguageLanguageCrossReference_3_0() { return cLanguageLanguageCrossReference_3_0; }
		
		//ID
		public RuleCall getLanguageLanguageIDTerminalRuleCall_3_0_1() { return cLanguageLanguageIDTerminalRuleCall_3_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Condition");
		private final RuleCall cEquivParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	Equiv;
		@Override public ParserRule getRule() { return rule; }
		
		//Equiv
		public RuleCall getEquivParserRuleCall() { return cEquivParserRuleCall; }
	}
	public class EquivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Equiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImplyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEquivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImplyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equiv Condition:
		//	Imply ({Equiv.left=current} '<=>' right=Imply)*
		@Override public ParserRule getRule() { return rule; }
		
		//Imply ({Equiv.left=current} '<=>' right=Imply)*
		public Group getGroup() { return cGroup; }
		
		//Imply
		public RuleCall getImplyParserRuleCall_0() { return cImplyParserRuleCall_0; }
		
		//({Equiv.left=current} '<=>' right=Imply)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equiv.left=current}
		public Action getEquivLeftAction_1_0() { return cEquivLeftAction_1_0; }
		
		//'<=>'
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_1() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Imply
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Imply
		public RuleCall getRightImplyParserRuleCall_1_2_0() { return cRightImplyParserRuleCall_1_2_0; }
	}
	public class ImplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Imply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplyLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Imply Condition:
		//	Or ({Imply.left=current} '=>' right=Or)*
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({Imply.left=current} '=>' right=Or)*
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({Imply.left=current} '=>' right=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Imply.left=current}
		public Action getImplyLeftAction_1_0() { return cImplyLeftAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Or
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or
		public RuleCall getRightOrParserRuleCall_1_2_0() { return cRightOrParserRuleCall_1_2_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Condition:
		//	And ({Or.left=current} 'or' right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} 'or' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} 'or' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Condition:
		//	Primary ({And.left=current} 'and' right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({And.left=current} 'and' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({And.left=current} 'and' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextPrimaryParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefFeatureModelCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefFeatureModelIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefFeatureModelCrossReference_2_1_0.eContents().get(1);
		
		//Primary Condition:
		//	'(' Condition ')' | {Not} '!' next=Primary | {Variable} ref=[FeatureModel]
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Condition ')' | {Not} '!' next=Primary | {Variable} ref=[FeatureModel]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Condition ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} '!' next=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//next=Primary
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }
		
		//Primary
		public RuleCall getNextPrimaryParserRuleCall_1_2_0() { return cNextPrimaryParserRuleCall_1_2_0; }
		
		//{Variable} ref=[FeatureModel]
		public Group getGroup_2() { return cGroup_2; }
		
		//{Variable}
		public Action getVariableAction_2_0() { return cVariableAction_2_0; }
		
		//ref=[FeatureModel]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }
		
		//[FeatureModel]
		public CrossReference getRefFeatureModelCrossReference_2_1_0() { return cRefFeatureModelCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefFeatureModelIDTerminalRuleCall_2_1_0_1() { return cRefFeatureModelIDTerminalRuleCall_2_1_0_1; }
	}
	public class IDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.ColdLang.IDS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IDS:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final ConcernElements pConcern;
	private final FeatureModelElements pFeatureModel;
	private final OneOfElements pOneOf;
	private final SomeOfElements pSomeOf;
	private final FeatureElements pFeature;
	private final LanguageElements pLanguage;
	private final LanguageOperatorElements pLanguageOperator;
	private final PerspectiveElements pPerspective;
	private final PerspectiveLanguageElements pPerspectiveLanguage;
	private final FacetElements pFacet;
	private final FacetCompositionElements pFacetComposition;
	private final ApplicationElements pApplication;
	private final ArtifactElements pArtifact;
	private final ConditionElements pCondition;
	private final EquivElements pEquiv;
	private final ImplyElements pImply;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PrimaryElements pPrimary;
	private final IDSElements pIDS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ColdLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConcern = new ConcernElements();
		this.pFeatureModel = new FeatureModelElements();
		this.pOneOf = new OneOfElements();
		this.pSomeOf = new SomeOfElements();
		this.pFeature = new FeatureElements();
		this.pLanguage = new LanguageElements();
		this.pLanguageOperator = new LanguageOperatorElements();
		this.pPerspective = new PerspectiveElements();
		this.pPerspectiveLanguage = new PerspectiveLanguageElements();
		this.pFacet = new FacetElements();
		this.pFacetComposition = new FacetCompositionElements();
		this.pApplication = new ApplicationElements();
		this.pArtifact = new ArtifactElements();
		this.pCondition = new ConditionElements();
		this.pEquiv = new EquivElements();
		this.pImply = new ImplyElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPrimary = new PrimaryElements();
		this.pIDS = new IDSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.ColdLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(concerns+=Concern | languages+=Language | perspectives+=Perspective)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Concern:
	//	'concern' name=ID '{' ('import' imported+=[Perspective])? (facets+=Facet | artifact+=Artifact)*
	//	fm=FeatureModel
	//	'}';
	public ConcernElements getConcernAccess() {
		return pConcern;
	}
	
	public ParserRule getConcernRule() {
		return getConcernAccess().getRule();
	}
	
	//FeatureModel:
	//	OneOf | SomeOf | Feature;
	public FeatureModelElements getFeatureModelAccess() {
		return pFeatureModel;
	}
	
	public ParserRule getFeatureModelRule() {
		return getFeatureModelAccess().getRule();
	}
	
	//OneOf FeatureModel:
	//	{OneOf} optional?='?'? 'oneOf' name=ID '[' ("-" children+=FeatureModel)*
	//	']' condition=Condition?
	public OneOfElements getOneOfAccess() {
		return pOneOf;
	}
	
	public ParserRule getOneOfRule() {
		return getOneOfAccess().getRule();
	}
	
	//SomeOf FeatureModel:
	//	{SomeOf} optional?='?'? 'someOf' name=ID '[' ("-" children+=FeatureModel)*
	//	']' condition=Condition?
	public SomeOfElements getSomeOfAccess() {
		return pSomeOf;
	}
	
	public ParserRule getSomeOfRule() {
		return getSomeOfAccess().getRule();
	}
	
	//Feature FeatureModel:
	//	{Feature} optional?='?'? 'feature' name=ID condition=Condition?
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Language:
	//	'language' name=ID '{'
	//	operators+=LanguageOperator*
	//	'}';
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//LanguageOperator:
	//	name=ID ':' type+=[Language] ('=>' types+=[Language])* '[' description=STRING ']';
	public LanguageOperatorElements getLanguageOperatorAccess() {
		return pLanguageOperator;
	}
	
	public ParserRule getLanguageOperatorRule() {
		return getLanguageOperatorAccess().getRule();
	}
	
	//Perspective:
	//	'perspective' name=ID '{'
	//	languages+=PerspectiveLanguage*
	//	'}';
	public PerspectiveElements getPerspectiveAccess() {
		return pPerspective;
	}
	
	public ParserRule getPerspectiveRule() {
		return getPerspectiveAccess().getRule();
	}
	
	//PerspectiveLanguage:
	//	name=ID ':' language=[Language] (operator=[LanguageOperator] perspective=[PerspectiveLanguage|IDS])?;
	public PerspectiveLanguageElements getPerspectiveLanguageAccess() {
		return pPerspectiveLanguage;
	}
	
	public ParserRule getPerspectiveLanguageRule() {
		return getPerspectiveLanguageAccess().getRule();
	}
	
	//Facet:
	//	'facet' name=ID ':' perspective=[Perspective] '{'
	//	'activation' activation=Condition
	//	compositions+=FacetComposition*
	//	'}';
	public FacetElements getFacetAccess() {
		return pFacet;
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}
	
	//FacetComposition:
	//	perspectiveLanguage=[PerspectiveLanguage] ':' application=Application;
	public FacetCompositionElements getFacetCompositionAccess() {
		return pFacetComposition;
	}
	
	public ParserRule getFacetCompositionRule() {
		return getFacetCompositionAccess().getRule();
	}
	
	//Application:
	//	{ArtifactRef} artifact=[Artifact] | {Application} languageOperator=[LanguageOperator] '(' applications+=Application
	//	(',' applications+=Application)*
	//	')';
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Artifact:
	//	'artifact' name=ID ':' language=[Language];
	public ArtifactElements getArtifactAccess() {
		return pArtifact;
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}
	
	//Condition:
	//	Equiv;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Equiv Condition:
	//	Imply ({Equiv.left=current} '<=>' right=Imply)*
	public EquivElements getEquivAccess() {
		return pEquiv;
	}
	
	public ParserRule getEquivRule() {
		return getEquivAccess().getRule();
	}
	
	//Imply Condition:
	//	Or ({Imply.left=current} '=>' right=Or)*
	public ImplyElements getImplyAccess() {
		return pImply;
	}
	
	public ParserRule getImplyRule() {
		return getImplyAccess().getRule();
	}
	
	//Or Condition:
	//	And ({Or.left=current} 'or' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Condition:
	//	Primary ({And.left=current} 'and' right=Primary)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Primary Condition:
	//	'(' Condition ')' | {Not} '!' next=Primary | {Variable} ref=[FeatureModel]
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IDS:
	//	ID ('.' ID)*;
	public IDSElements getIDSAccess() {
		return pIDS;
	}
	
	public ParserRule getIDSRule() {
		return getIDSAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
