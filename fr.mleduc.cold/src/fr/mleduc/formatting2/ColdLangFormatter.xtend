/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.formatting2

import com.google.inject.Inject
import fr.mleduc.coldLang.Artifact
import fr.mleduc.coldLang.Concern
import fr.mleduc.coldLang.Facet
import fr.mleduc.coldLang.Language
import fr.mleduc.coldLang.Model
import fr.mleduc.coldLang.Perspective
import fr.mleduc.services.ColdLangGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import fr.mleduc.coldLang.PerspectiveLanguage

class ColdLangFormatter extends AbstractFormatter2 {

	@Inject extension ColdLangGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Concern concerns : model.getConcerns()) {
			concerns.format;
		}
		for (Language languages : model.getLanguages()) {
			languages.format;
		}

		for (Perspective perspective : model.perspectives) {
			perspective.format;
		}
	}

	def dispatch void format(Perspective perspective, extension IFormattableDocument document) {
		interior(
			perspective.regionFor.keyword('{').append[newLine].prepend[oneSpace],
			perspective.regionFor.keyword('}')
		)[indent]
		for (PerspectiveLanguage language : perspective.languages) {
			language.format
			language.append[setNewLines(1, 1, 2)]
		}
	}

	def dispatch void format(Concern concern, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		interior(
			concern.regionFor.keyword('{').append[newLine].prepend[oneSpace],
			concern.regionFor.keyword('}')
		)[indent]
		for (Facet facets : concern.getFacets()) {
			facets.format;
			facets.append[setNewLines(1, 1, 2)]
		}
		for (Artifact artifact : concern.getArtifact()) {
			artifact.format;
			artifact.append[setNewLines(1, 1, 2)]
		}
		concern.getFm.format;
	}

// TODO: implement for OneOf, SomeOf, Language, Perspective, Facet, Equiv, Imply, Or, And, Parenthesis, Not
}
