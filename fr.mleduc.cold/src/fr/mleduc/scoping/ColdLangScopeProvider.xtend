/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.scoping

import fr.mleduc.coldLang.ColdLangPackage
import fr.mleduc.coldLang.Concern
import fr.mleduc.coldLang.Facet
import fr.mleduc.coldLang.FacetComposition
import fr.mleduc.coldLang.FeatureModel
import fr.mleduc.coldLang.Model
import fr.mleduc.coldLang.PerspectiveLanguage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.MapBasedScope

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ColdLangScopeProvider extends AbstractColdLangScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		if (reference == ColdLangPackage::eINSTANCE.perspectiveLanguage_Operator) {
			val pl = context as PerspectiveLanguage
			MapBasedScope::createScope(IScope::NULLSCOPE, pl.language.operators.map [
				EObjectDescription::create(it.name, it)
			])
		} else if (reference == ColdLangPackage::eINSTANCE.perspectiveLanguage_Perspective) {
			val perspectives = context.getContainerOfType(Model).perspectives
			val map = perspectives.filter[it !== context].map[it.languages].flatten.map [
				EObjectDescription::create(it.name, it)
			]
			MapBasedScope::createScope(IScope::NULLSCOPE, map)
		} else if (reference == ColdLangPackage::eINSTANCE.variable_Ref) {
			val map = context.getContainerOfType(Concern).fm?.getAllContentsOfType(FeatureModel)?.map [
				EObjectDescription::create(it.name, it)
			] ?: newArrayList()
			MapBasedScope::createScope(IScope::NULLSCOPE, map)

		} else if (reference == ColdLangPackage::eINSTANCE.facetComposition_PerspectiveLanguage) {
			val map = context.getContainerOfType(Facet).perspective.languages.map [
				EObjectDescription::create(it.name, it)
			]
			MapBasedScope::createScope(IScope::NULLSCOPE, map)
		} else if (reference == ColdLangPackage::eINSTANCE.artifactRef_Artifact) {
			val map = context.getContainerOfType(Concern).artifact.map [
				EObjectDescription::create(it.name, it)
			]
			MapBasedScope::createScope(IScope::NULLSCOPE, map)
		} else if (reference == ColdLangPackage::eINSTANCE.application_LanguageOperator) {
			val map = context.getContainerOfType(FacetComposition)?.perspectiveLanguage?.language?.operators?.map [
				EObjectDescription::create(it.name, it)
			] ?: newArrayList()
			MapBasedScope::createScope(IScope::NULLSCOPE, map)
		} else {
			super.getScope(context, reference)
		}
	}

}
