/**
 * generated by Xtext 2.10.0
 */
package fr.mleduc.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import fr.mleduc.coldLang.Artifact;
import fr.mleduc.coldLang.ColdLangPackage;
import fr.mleduc.coldLang.Concern;
import fr.mleduc.coldLang.Facet;
import fr.mleduc.coldLang.FacetComposition;
import fr.mleduc.coldLang.FeatureModel;
import fr.mleduc.coldLang.Language;
import fr.mleduc.coldLang.LanguageOperator;
import fr.mleduc.coldLang.Model;
import fr.mleduc.coldLang.Perspective;
import fr.mleduc.coldLang.PerspectiveLanguage;
import fr.mleduc.scoping.AbstractColdLangScopeProvider;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ColdLangScopeProvider extends AbstractColdLangScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    EReference _perspectiveLanguage_Operator = ColdLangPackage.eINSTANCE.getPerspectiveLanguage_Operator();
    boolean _equals = Objects.equal(reference, _perspectiveLanguage_Operator);
    if (_equals) {
      IScope _xblockexpression = null;
      {
        final PerspectiveLanguage pl = ((PerspectiveLanguage) context);
        Language _language = pl.getLanguage();
        EList<LanguageOperator> _operators = _language.getOperators();
        final Function1<LanguageOperator, IEObjectDescription> _function = (LanguageOperator it) -> {
          String _name = it.getName();
          return EObjectDescription.create(_name, it);
        };
        List<IEObjectDescription> _map = ListExtensions.<LanguageOperator, IEObjectDescription>map(_operators, _function);
        _xblockexpression = MapBasedScope.createScope(IScope.NULLSCOPE, _map);
      }
      _xifexpression = _xblockexpression;
    } else {
      IScope _xifexpression_1 = null;
      EReference _perspectiveLanguage_Perspective = ColdLangPackage.eINSTANCE.getPerspectiveLanguage_Perspective();
      boolean _equals_1 = Objects.equal(reference, _perspectiveLanguage_Perspective);
      if (_equals_1) {
        IScope _xblockexpression_1 = null;
        {
          Model _containerOfType = EcoreUtil2.<Model>getContainerOfType(context, Model.class);
          final EList<Perspective> perspectives = _containerOfType.getPerspectives();
          final Function1<Perspective, Boolean> _function = (Perspective it) -> {
            return Boolean.valueOf((it != context));
          };
          Iterable<Perspective> _filter = IterableExtensions.<Perspective>filter(perspectives, _function);
          final Function1<Perspective, EList<PerspectiveLanguage>> _function_1 = (Perspective it) -> {
            return it.getLanguages();
          };
          Iterable<EList<PerspectiveLanguage>> _map = IterableExtensions.<Perspective, EList<PerspectiveLanguage>>map(_filter, _function_1);
          Iterable<PerspectiveLanguage> _flatten = Iterables.<PerspectiveLanguage>concat(_map);
          final Function1<PerspectiveLanguage, IEObjectDescription> _function_2 = (PerspectiveLanguage it) -> {
            String _name = it.getName();
            return EObjectDescription.create(_name, it);
          };
          final Iterable<IEObjectDescription> map = IterableExtensions.<PerspectiveLanguage, IEObjectDescription>map(_flatten, _function_2);
          _xblockexpression_1 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        IScope _xifexpression_2 = null;
        EReference _variable_Ref = ColdLangPackage.eINSTANCE.getVariable_Ref();
        boolean _equals_2 = Objects.equal(reference, _variable_Ref);
        if (_equals_2) {
          IScope _xblockexpression_2 = null;
          {
            List<IEObjectDescription> _elvis = null;
            Concern _containerOfType = EcoreUtil2.<Concern>getContainerOfType(context, Concern.class);
            FeatureModel _fm = _containerOfType.getFm();
            List<FeatureModel> _allContentsOfType = null;
            if (_fm!=null) {
              _allContentsOfType=EcoreUtil2.<FeatureModel>getAllContentsOfType(_fm, FeatureModel.class);
            }
            List<IEObjectDescription> _map = null;
            if (_allContentsOfType!=null) {
              final Function1<FeatureModel, IEObjectDescription> _function = (FeatureModel it) -> {
                String _name = it.getName();
                return EObjectDescription.create(_name, it);
              };
              _map=ListExtensions.<FeatureModel, IEObjectDescription>map(_allContentsOfType, _function);
            }
            if (_map != null) {
              _elvis = _map;
            } else {
              ArrayList<IEObjectDescription> _newArrayList = CollectionLiterals.<IEObjectDescription>newArrayList();
              _elvis = _newArrayList;
            }
            final List<IEObjectDescription> map = _elvis;
            _xblockexpression_2 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
          }
          _xifexpression_2 = _xblockexpression_2;
        } else {
          IScope _xifexpression_3 = null;
          EReference _facetComposition_PerspectiveLanguage = ColdLangPackage.eINSTANCE.getFacetComposition_PerspectiveLanguage();
          boolean _equals_3 = Objects.equal(reference, _facetComposition_PerspectiveLanguage);
          if (_equals_3) {
            IScope _xblockexpression_3 = null;
            {
              Facet _containerOfType = EcoreUtil2.<Facet>getContainerOfType(context, Facet.class);
              Perspective _perspective = _containerOfType.getPerspective();
              EList<PerspectiveLanguage> _languages = _perspective.getLanguages();
              final Function1<PerspectiveLanguage, IEObjectDescription> _function = (PerspectiveLanguage it) -> {
                String _name = it.getName();
                return EObjectDescription.create(_name, it);
              };
              final List<IEObjectDescription> map = ListExtensions.<PerspectiveLanguage, IEObjectDescription>map(_languages, _function);
              _xblockexpression_3 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
            }
            _xifexpression_3 = _xblockexpression_3;
          } else {
            IScope _xifexpression_4 = null;
            EReference _artifactRef_Artifact = ColdLangPackage.eINSTANCE.getArtifactRef_Artifact();
            boolean _equals_4 = Objects.equal(reference, _artifactRef_Artifact);
            if (_equals_4) {
              IScope _xblockexpression_4 = null;
              {
                Concern _containerOfType = EcoreUtil2.<Concern>getContainerOfType(context, Concern.class);
                EList<Artifact> _artifact = _containerOfType.getArtifact();
                final Function1<Artifact, IEObjectDescription> _function = (Artifact it) -> {
                  String _name = it.getName();
                  return EObjectDescription.create(_name, it);
                };
                final List<IEObjectDescription> map = ListExtensions.<Artifact, IEObjectDescription>map(_artifact, _function);
                _xblockexpression_4 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
              }
              _xifexpression_4 = _xblockexpression_4;
            } else {
              IScope _xifexpression_5 = null;
              EReference _application_LanguageOperator = ColdLangPackage.eINSTANCE.getApplication_LanguageOperator();
              boolean _equals_5 = Objects.equal(reference, _application_LanguageOperator);
              if (_equals_5) {
                IScope _xblockexpression_5 = null;
                {
                  List<IEObjectDescription> _elvis = null;
                  FacetComposition _containerOfType = EcoreUtil2.<FacetComposition>getContainerOfType(context, FacetComposition.class);
                  PerspectiveLanguage _perspectiveLanguage = null;
                  if (_containerOfType!=null) {
                    _perspectiveLanguage=_containerOfType.getPerspectiveLanguage();
                  }
                  Language _language = null;
                  if (_perspectiveLanguage!=null) {
                    _language=_perspectiveLanguage.getLanguage();
                  }
                  EList<LanguageOperator> _operators = null;
                  if (_language!=null) {
                    _operators=_language.getOperators();
                  }
                  List<IEObjectDescription> _map = null;
                  if (_operators!=null) {
                    final Function1<LanguageOperator, IEObjectDescription> _function = (LanguageOperator it) -> {
                      String _name = it.getName();
                      return EObjectDescription.create(_name, it);
                    };
                    _map=ListExtensions.<LanguageOperator, IEObjectDescription>map(_operators, _function);
                  }
                  if (_map != null) {
                    _elvis = _map;
                  } else {
                    ArrayList<IEObjectDescription> _newArrayList = CollectionLiterals.<IEObjectDescription>newArrayList();
                    _elvis = _newArrayList;
                  }
                  final List<IEObjectDescription> map = _elvis;
                  _xblockexpression_5 = MapBasedScope.createScope(IScope.NULLSCOPE, map);
                }
                _xifexpression_5 = _xblockexpression_5;
              } else {
                _xifexpression_5 = super.getScope(context, reference);
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
