/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.mleduc.ide.contentassist.antlr.internal.InternalColdLangParser;
import fr.mleduc.services.ColdLangGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ColdLangParser extends AbstractContentAssistParser {

	@Inject
	private ColdLangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalColdLangParser createParser() {
		InternalColdLangParser result = new InternalColdLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getConcernAccess().getAlternatives_4(), "rule__Concern__Alternatives_4");
					put(grammarAccess.getFeatureModelAccess().getAlternatives(), "rule__FeatureModel__Alternatives");
					put(grammarAccess.getApplicationAccess().getAlternatives(), "rule__Application__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getConcernAccess().getGroup(), "rule__Concern__Group__0");
					put(grammarAccess.getConcernAccess().getGroup_3(), "rule__Concern__Group_3__0");
					put(grammarAccess.getOneOfAccess().getGroup(), "rule__OneOf__Group__0");
					put(grammarAccess.getOneOfAccess().getGroup_5(), "rule__OneOf__Group_5__0");
					put(grammarAccess.getSomeOfAccess().getGroup(), "rule__SomeOf__Group__0");
					put(grammarAccess.getSomeOfAccess().getGroup_5(), "rule__SomeOf__Group_5__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getLanguageAccess().getGroup(), "rule__Language__Group__0");
					put(grammarAccess.getLanguageOperatorAccess().getGroup(), "rule__LanguageOperator__Group__0");
					put(grammarAccess.getLanguageOperatorAccess().getGroup_3(), "rule__LanguageOperator__Group_3__0");
					put(grammarAccess.getPerspectiveAccess().getGroup(), "rule__Perspective__Group__0");
					put(grammarAccess.getPerspectiveLanguageAccess().getGroup(), "rule__PerspectiveLanguage__Group__0");
					put(grammarAccess.getPerspectiveLanguageAccess().getGroup_3(), "rule__PerspectiveLanguage__Group_3__0");
					put(grammarAccess.getFacetAccess().getGroup(), "rule__Facet__Group__0");
					put(grammarAccess.getFacetCompositionAccess().getGroup(), "rule__FacetComposition__Group__0");
					put(grammarAccess.getApplicationAccess().getGroup_0(), "rule__Application__Group_0__0");
					put(grammarAccess.getApplicationAccess().getGroup_1(), "rule__Application__Group_1__0");
					put(grammarAccess.getApplicationAccess().getGroup_1_4(), "rule__Application__Group_1_4__0");
					put(grammarAccess.getArtifactAccess().getGroup(), "rule__Artifact__Group__0");
					put(grammarAccess.getEquivAccess().getGroup(), "rule__Equiv__Group__0");
					put(grammarAccess.getEquivAccess().getGroup_1(), "rule__Equiv__Group_1__0");
					put(grammarAccess.getImplyAccess().getGroup(), "rule__Imply__Group__0");
					put(grammarAccess.getImplyAccess().getGroup_1(), "rule__Imply__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getIDSAccess().getGroup(), "rule__IDS__Group__0");
					put(grammarAccess.getIDSAccess().getGroup_1(), "rule__IDS__Group_1__0");
					put(grammarAccess.getModelAccess().getConcernsAssignment_0(), "rule__Model__ConcernsAssignment_0");
					put(grammarAccess.getModelAccess().getLanguagesAssignment_1(), "rule__Model__LanguagesAssignment_1");
					put(grammarAccess.getModelAccess().getPerspectivesAssignment_2(), "rule__Model__PerspectivesAssignment_2");
					put(grammarAccess.getConcernAccess().getNameAssignment_1(), "rule__Concern__NameAssignment_1");
					put(grammarAccess.getConcernAccess().getImportedAssignment_3_1(), "rule__Concern__ImportedAssignment_3_1");
					put(grammarAccess.getConcernAccess().getFacetsAssignment_4_0(), "rule__Concern__FacetsAssignment_4_0");
					put(grammarAccess.getConcernAccess().getArtifactAssignment_4_1(), "rule__Concern__ArtifactAssignment_4_1");
					put(grammarAccess.getConcernAccess().getFmAssignment_5(), "rule__Concern__FmAssignment_5");
					put(grammarAccess.getOneOfAccess().getOptionalAssignment_1(), "rule__OneOf__OptionalAssignment_1");
					put(grammarAccess.getOneOfAccess().getNameAssignment_3(), "rule__OneOf__NameAssignment_3");
					put(grammarAccess.getOneOfAccess().getChildrenAssignment_5_1(), "rule__OneOf__ChildrenAssignment_5_1");
					put(grammarAccess.getOneOfAccess().getConditionAssignment_7(), "rule__OneOf__ConditionAssignment_7");
					put(grammarAccess.getSomeOfAccess().getOptionalAssignment_1(), "rule__SomeOf__OptionalAssignment_1");
					put(grammarAccess.getSomeOfAccess().getNameAssignment_3(), "rule__SomeOf__NameAssignment_3");
					put(grammarAccess.getSomeOfAccess().getChildrenAssignment_5_1(), "rule__SomeOf__ChildrenAssignment_5_1");
					put(grammarAccess.getSomeOfAccess().getConditionAssignment_7(), "rule__SomeOf__ConditionAssignment_7");
					put(grammarAccess.getFeatureAccess().getOptionalAssignment_1(), "rule__Feature__OptionalAssignment_1");
					put(grammarAccess.getFeatureAccess().getNameAssignment_3(), "rule__Feature__NameAssignment_3");
					put(grammarAccess.getFeatureAccess().getConditionAssignment_4(), "rule__Feature__ConditionAssignment_4");
					put(grammarAccess.getLanguageAccess().getNameAssignment_1(), "rule__Language__NameAssignment_1");
					put(grammarAccess.getLanguageAccess().getOperatorsAssignment_3(), "rule__Language__OperatorsAssignment_3");
					put(grammarAccess.getLanguageOperatorAccess().getNameAssignment_0(), "rule__LanguageOperator__NameAssignment_0");
					put(grammarAccess.getLanguageOperatorAccess().getTypeAssignment_2(), "rule__LanguageOperator__TypeAssignment_2");
					put(grammarAccess.getLanguageOperatorAccess().getTypesAssignment_3_1(), "rule__LanguageOperator__TypesAssignment_3_1");
					put(grammarAccess.getLanguageOperatorAccess().getDescriptionAssignment_5(), "rule__LanguageOperator__DescriptionAssignment_5");
					put(grammarAccess.getPerspectiveAccess().getNameAssignment_1(), "rule__Perspective__NameAssignment_1");
					put(grammarAccess.getPerspectiveAccess().getLanguagesAssignment_3(), "rule__Perspective__LanguagesAssignment_3");
					put(grammarAccess.getPerspectiveLanguageAccess().getNameAssignment_0(), "rule__PerspectiveLanguage__NameAssignment_0");
					put(grammarAccess.getPerspectiveLanguageAccess().getLanguageAssignment_2(), "rule__PerspectiveLanguage__LanguageAssignment_2");
					put(grammarAccess.getPerspectiveLanguageAccess().getOperatorAssignment_3_0(), "rule__PerspectiveLanguage__OperatorAssignment_3_0");
					put(grammarAccess.getPerspectiveLanguageAccess().getPerspectiveAssignment_3_1(), "rule__PerspectiveLanguage__PerspectiveAssignment_3_1");
					put(grammarAccess.getFacetAccess().getNameAssignment_1(), "rule__Facet__NameAssignment_1");
					put(grammarAccess.getFacetAccess().getPerspectiveAssignment_3(), "rule__Facet__PerspectiveAssignment_3");
					put(grammarAccess.getFacetAccess().getActivationAssignment_6(), "rule__Facet__ActivationAssignment_6");
					put(grammarAccess.getFacetAccess().getCompositionsAssignment_7(), "rule__Facet__CompositionsAssignment_7");
					put(grammarAccess.getFacetCompositionAccess().getPerspectiveLanguageAssignment_0(), "rule__FacetComposition__PerspectiveLanguageAssignment_0");
					put(grammarAccess.getFacetCompositionAccess().getApplicationAssignment_2(), "rule__FacetComposition__ApplicationAssignment_2");
					put(grammarAccess.getApplicationAccess().getArtifactAssignment_0_1(), "rule__Application__ArtifactAssignment_0_1");
					put(grammarAccess.getApplicationAccess().getLanguageOperatorAssignment_1_1(), "rule__Application__LanguageOperatorAssignment_1_1");
					put(grammarAccess.getApplicationAccess().getApplicationsAssignment_1_3(), "rule__Application__ApplicationsAssignment_1_3");
					put(grammarAccess.getApplicationAccess().getApplicationsAssignment_1_4_1(), "rule__Application__ApplicationsAssignment_1_4_1");
					put(grammarAccess.getArtifactAccess().getNameAssignment_1(), "rule__Artifact__NameAssignment_1");
					put(grammarAccess.getArtifactAccess().getLanguageAssignment_3(), "rule__Artifact__LanguageAssignment_3");
					put(grammarAccess.getEquivAccess().getRightAssignment_1_2(), "rule__Equiv__RightAssignment_1_2");
					put(grammarAccess.getImplyAccess().getRightAssignment_1_2(), "rule__Imply__RightAssignment_1_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getNextAssignment_1_2(), "rule__Primary__NextAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getRefAssignment_2_1(), "rule__Primary__RefAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalColdLangParser typedParser = (InternalColdLangParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ColdLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ColdLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
