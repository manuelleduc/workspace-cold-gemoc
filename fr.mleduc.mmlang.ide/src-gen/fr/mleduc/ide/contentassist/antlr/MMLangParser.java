/*
 * generated by Xtext 2.10.0
 */
package fr.mleduc.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.mleduc.ide.contentassist.antlr.internal.InternalMMLangParser;
import fr.mleduc.services.MMLangGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class MMLangParser extends AbstractContentAssistParser {

	@Inject
	private MMLangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMMLangParser createParser() {
		InternalMMLangParser result = new InternalMMLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
					put(grammarAccess.getCardAccess().getAlternatives(), "rule__Card__Alternatives");
					put(grammarAccess.getMetamodelAccess().getGroup(), "rule__Metamodel__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
					put(grammarAccess.getClassAccess().getGroup_3_2(), "rule__Class__Group_3_2__0");
					put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
					put(grammarAccess.getClassAccess().getGroup_4_2(), "rule__Class__Group_4_2__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getFieldAccess().getGroup_4(), "rule__Field__Group_4__0");
					put(grammarAccess.getFieldAccess().getGroup_4_2(), "rule__Field__Group_4_2__0");
					put(grammarAccess.getCardAccess().getGroup_0(), "rule__Card__Group_0__0");
					put(grammarAccess.getCardAccess().getGroup_1(), "rule__Card__Group_1__0");
					put(grammarAccess.getCardAccess().getGroup_2(), "rule__Card__Group_2__0");
					put(grammarAccess.getMetamodelAccess().getConcreteAssignment_0(), "rule__Metamodel__ConcreteAssignment_0");
					put(grammarAccess.getMetamodelAccess().getNameAssignment_2(), "rule__Metamodel__NameAssignment_2");
					put(grammarAccess.getMetamodelAccess().getClassesAssignment_3(), "rule__Metamodel__ClassesAssignment_3");
					put(grammarAccess.getClassAccess().getAbstractAssignment_0(), "rule__Class__AbstractAssignment_0");
					put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
					put(grammarAccess.getClassAccess().getParentsAssignment_3_1(), "rule__Class__ParentsAssignment_3_1");
					put(grammarAccess.getClassAccess().getParentsAssignment_3_2_1(), "rule__Class__ParentsAssignment_3_2_1");
					put(grammarAccess.getClassAccess().getGenericsAssignment_4_1(), "rule__Class__GenericsAssignment_4_1");
					put(grammarAccess.getClassAccess().getGenericsAssignment_4_2_1(), "rule__Class__GenericsAssignment_4_2_1");
					put(grammarAccess.getClassAccess().getFieldsAssignment_6(), "rule__Class__FieldsAssignment_6");
					put(grammarAccess.getGenericAccess().getNameAssignment(), "rule__Generic__NameAssignment");
					put(grammarAccess.getFieldAccess().getContainmentAssignment_0(), "rule__Field__ContainmentAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getFieldAccess().getTypeAssignment_3(), "rule__Field__TypeAssignment_3");
					put(grammarAccess.getFieldAccess().getGenericsAssignment_4_1(), "rule__Field__GenericsAssignment_4_1");
					put(grammarAccess.getFieldAccess().getGenericsAssignment_4_2_1(), "rule__Field__GenericsAssignment_4_2_1");
					put(grammarAccess.getFieldAccess().getStart_cardAssignment_6(), "rule__Field__Start_cardAssignment_6");
					put(grammarAccess.getFieldAccess().getStop_cardAssignment_8(), "rule__Field__Stop_cardAssignment_8");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMMLangParser typedParser = (InternalMMLangParser) parser;
			typedParser.entryRuleMetamodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MMLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MMLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
